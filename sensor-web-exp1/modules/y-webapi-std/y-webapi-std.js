// Generated by LiveScript 1.4.0
(function(){
  var express, keys, NAME, DBGT, exports;
  express = require('express');
  keys = require('prelude-ls').keys;
  NAME = 'std-webapi';
  DBGT = null;
  module.exports = exports = {
    name: NAME,
    attach: function(opts){
      module.logger = opts.helpers.logger;
      DBGT = function(){
        return module.logger.debug.apply(module.logger, arguments);
      };
    },
    init: function(done){
      var app, web, parent, ref$, composeError, composeData, std;
      app = this;
      web = app.web, parent = app.parent;
      ref$ = web.helpers, composeError = ref$.composeError, composeData = ref$.composeData;
      std = express();
      std.get('/config', function(req, res){
        var api_routes, wss, plugins, plugin_names, i$, len$, config;
        api_routes = web.api_routes, wss = web.wss;
        plugins = parent.plugin_instances;
        plugin_names = [];
        for (i$ = 0, len$ = plugins.length; i$ < len$; ++i$) {
          (fn$.call(this, i$, plugins[i$]));
        }
        config = {
          name: parent.name,
          type: parent.type,
          plugins: plugin_names,
          api_endpoints: keys(api_routes),
          websocket_namespaces: keys(wss),
          opts: web._opts
        };
        return composeData(req, res, config, 200);
        function fn$(i, p){
          plugin_names.push(p.name);
        }
      });
      std.get('/hello', function(req, res){
        return res.send("world");
      });
      std.get('/time', function(req, res){
        return res.send(JSON.stringify(new Date()) + "");
      });
      std.get('/exit', function(req, res){
        var exit;
        res.send("will shutdown gracefully ...\n");
        exit = function(){
          return process.exit(0);
        };
        return setTimeout(exit, 1000);
      });
      std.get('/restart', function(req, res){
        var exit;
        res.send("will restart immediately ...\n");
        exit = function(){
          return process.exit(230);
        };
        return setTimeout(exit, 1000);
      });
      web.useApi('std', std);
      return done();
    }
  };
}).call(this);
