// Generated by LiveScript 1.4.0
(function(){
  var moment, DBG, timerCbCurrying, exports, Timer;
  moment = require('moment');
  DBG = function(){
    if (global.logger != null) {
      return global.logger.debug.apply(global.logger, arguments);
    } else {
      return console.log.apply(console.log, arguments);
    }
  };
  /**
   * Simple Usage for Timer class
  
      t = new Timer 10s, obj, func
      t = new Timer 10s, obj, func, args
      t = new Timer 10s, func
      t = new Timer 10s, func, args
  
      t.start!
      t.configure 5s
  
      t.stop!
      t.cleanup!
   *
   */
  timerCbCurrying = curry$(function(timer, dummy){
    return timer.check();
  });
  module.exports = exports = Timer = (function(){
    Timer.displayName = 'Timer';
    var prototype = Timer.prototype, constructor = Timer;
    function Timer(period, x, y, z){
      var type;
      this.period = period;
      DBG("initiate timer w/ period = " + period);
      this.args = [];
      this.obj = null;
      this.interval_obj = null;
      this.last_invocation = null;
      this.callback = timerCbCurrying(this);
      type = typeof x;
      if ("function" === type) {
        this.type = "contextless";
        this.func = x;
        if (y != null && "array" === typeof y) {
          this.args = y;
        }
      } else if ("object" === typeof x && "string" === typeof y) {
        this.type = "context";
        this.obj = x;
        this.func = x[y];
        if (z != null && "array" === typeof z) {
          this.args = z;
        }
        if (this.func == null) {
          throw new Error("function " + y + " not found");
        }
      } else {
        throw new Error("invalid arguments for timer creation");
      }
      this.running = false;
      this.interval_obj = setInterval(this.callback, 500);
      this.last_invocation = moment();
    }
    prototype.start = function(){
      return this.running = true;
    };
    prototype.stop = function(){
      return this.running = false;
    };
    prototype.cleanup = function(){
      this.running = false;
      return clearInterval(this.interval_obj);
    };
    prototype.configure = function(period){
      this.period = period;
    };
    prototype.getPeriod = function(){
      return this.period;
    };
    prototype.check = function(){
      var now;
      if (!this.running) {
        return;
      }
      now = moment();
      now.subtract(this.period, 'seconds');
      if (now > this.last_invocation) {
        this.func.apply(this.obj, this.args);
        return this.last_invocation = moment();
      }
    };
    return Timer;
  }());
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
