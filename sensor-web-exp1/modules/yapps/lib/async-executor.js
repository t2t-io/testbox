// Generated by LiveScript 1.4.0
(function(){
  var async, colors, uid, loggerCurrying, runTaskCurrying, seriesEndCurrying, exports, AsyncExecutor;
  async = require('async');
  colors = require('colors');
  uid = require('uid');
  loggerCurrying = curry$(function(executor, task_name, logger, message){
    var num, id, prefix, text;
    num = executor.num + "";
    id = executor.id + "-" + num;
    prefix = executor.type + "[" + id.gray + "]." + task_name;
    text = prefix + " " + message;
    if (logger != null) {
      return logger(text);
    }
    return console.log(text);
  });
  runTaskCurrying = curry$(function(executor, context, logger, task_name, func, cb){
    var DBG, error;
    DBG = loggerCurrying(executor, task_name, logger);
    try {
      return func(executor, context, DBG, function(err, result){
        return cb(err, result);
      });
    } catch (e$) {
      error = e$;
      DBG(error.stack.red + "");
      return cb(error, null);
    }
  });
  seriesEndCurrying = curry$(function(executor, cb, err, results){
    return cb(executor, executor.context, err, results);
  });
  module.exports = exports = AsyncExecutor = (function(){
    AsyncExecutor.displayName = 'AsyncExecutor';
    var prototype = AsyncExecutor.prototype, constructor = AsyncExecutor;
    function AsyncExecutor(options){
      var type, logger, context, id;
      this.options = options;
      if (options != null) {
        type = options.type, logger = options.logger, context = options.context, id = options.id;
      }
      this.context = context != null
        ? context
        : {};
      this.type = type != null ? type : "unknown";
      this.logger = logger != null
        ? logger
        : console.log;
      this.id = id != null
        ? id
        : uid();
      this.num = 0;
    }
    prototype.series = function(tasks, callback){
      var new_funcs, i$, len$, end;
      new_funcs = [];
      for (i$ = 0, len$ = tasks.length; i$ < len$; ++i$) {
        (fn$.call(this, i$, tasks[i$]));
      }
      end = seriesEndCurrying(this, callback);
      async.series(new_funcs, end);
      return this.num = this.num + 1;
      function fn$(i, t){
        var func;
        func = runTaskCurrying(this, this.context, this.logger, t.name, t.func);
        new_funcs.push(func);
      }
    };
    return AsyncExecutor;
  }());
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
