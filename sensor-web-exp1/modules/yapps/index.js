// Generated by LiveScript 1.4.0
(function(){
  var loggerCurrying, createApplication, findName, exports;
  loggerCurrying = curry$(function(name, level, message){
    return console.error("yapps[" + name + "]:" + level + ": " + message);
  });
  createApplication = function(type, opts){
    var helpers, app_class, app, error;
    if (opts.verbose != null && opts.verbose) {
      global.DBG = loggerCurrying(type, 'debug');
    } else {
      global.DBG = function(message){};
    }
    global.INFO = loggerCurrying(type, 'info');
    try {
      helpers = {
        util: require('./lib/util'),
        resource: require('./lib/resource'),
        timer: require('./lib/timer'),
        asyncExecutor: require('./lib/async-executor')
      };
      app_class = type === 'web'
        ? require('./lib/apps/WebApp')
        : require('./lib/apps/BaseApp');
      app = new app_class(opts, helpers);
      return app;
    } catch (e$) {
      error = e$;
      INFO("failed to createApplication '" + type + "', err: " + error);
      return process.exit(1);
    }
  };
  findName = function(){
    var ex, regexp, matches, line, tokens;
    ex = new Error();
    regexp = /\(.*\/app.(j|l)s:.*\)/;
    matches = regexp.exec(ex.stack);
    if (matches == null) {
      return 'unknown';
    }
    line = matches[0];
    line = line.substring(1, line.length - 2);
    line.replace(/:.*/, "");
    tokens = line.split('/');
    if (!(tokens.length >= 2)) {
      return 'unknown';
    }
    return tokens[tokens.length - 2];
  };
  module.exports = exports = {
    createApp: function(type, opts){
      var app_type, app_opts;
      app_type = null;
      app_opts = null;
      if (type != null) {
        if ('string' === typeof type) {
          app_type = type;
          app_opts = opts;
        } else if ('object' === typeof type) {
          app_type = 'base';
          app_opts = type;
        }
      } else {
        app_type = 'base';
        app_opts = {};
      }
      if (app_opts.name == null) {
        app_opts.name = findName();
      }
      return createApplication(app_type, app_opts);
    }
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
