// Generated by LiveScript 1.4.0
(function(){
  var express, http, fs, path, colors, handlebars, bodyParser, expressBunyanLogger, ref$, elemIndex, keys, error_responses, NAME, DBGT, INFO, ERR, composeError, composeData, initiation, detectClientIp, trusted_ip, trusted_ip_or_user, secretCurrying, WebServer, exports;
  express = require('express');
  http = require('http');
  fs = require('fs');
  path = require('path');
  colors = require('colors');
  handlebars = require('handlebars');
  bodyParser = require('body-parser');
  expressBunyanLogger = require('express-bunyan-logger');
  ref$ = require('prelude-ls'), elemIndex = ref$.elemIndex, keys = ref$.keys;
  error_responses = require(__dirname + "/web_errors");
  NAME = 'web';
  DBGT = null;
  INFO = null;
  ERR = null;
  composeError = function(req, res, name, err){
    var r, template, context, msg, result;
    err == null && (err = null);
    if (error_responses[name] != null) {
      r = error_responses[name];
      template = handlebars.compile(r.message);
      context = {
        ip: req.ip,
        originalUrl: req.originalUrl,
        err: err
      };
      msg = template(context);
      result = {
        code: r.code,
        error: name,
        url: req.originalUrl,
        message: msg
      };
      ERR(req.method + " " + colors.yellow(req.url) + " " + colors.green(name) + " json = " + JSON.stringify(result));
      return res.status(r.status).json(result);
    } else {
      ERR(colors.yellow(req.url) + " " + colors.green(name) + " json = unknown error");
      return res.status(500).json({
        error: "unknown error: " + name
      });
    }
  };
  composeData = function(req, res, data, code){
    var result;
    code == null && (code = 200);
    result = {
      code: 0,
      error: null,
      message: null,
      url: req.originalUrl,
      data: data
    };
    return res.status(code).json(result);
  };
  initiation = function(req, res, next){
    req.web_context = {};
    return next();
  };
  detectClientIp = function(req, res, next){
    var ip, web_context;
    ip = req.ip;
    web_context = req.web_context;
    web_context.trusted_ip = false;
    if (ip === "127.0.0.1") {
      web_context.trusted_ip = true;
    }
    if (ip.startsWith("192.168.")) {
      web_context.trusted_ip = true;
    }
    if (undefined !== elemIndex(ip, ['118.163.145.217', '118.163.145.218', '118.163.145.219', '118.163.145.220', '118.163.145.221', '118.163.145.222', '59.87.11.170'])) {
      web_context.trusted_ip = true;
    }
    return next();
  };
  trusted_ip = function(req, res, next){
    if (!req.web_context.trusted_ip) {
      return composeError(req, res, 'untrusted_ip');
    }
    return next();
  };
  trusted_ip_or_user = function(req, res, next){
    req.user = {
      name: 'localhost'
    };
    return next();
  };
  secretCurrying = curry$(function(webserver, name, password, done){
    return webserver.secretCheck(name, password, done);
  });
  WebServer = (function(){
    WebServer.displayName = 'WebServer';
    var prototype = WebServer.prototype, constructor = WebServer;
    function WebServer(opts, app){
      var ref$, resource, util, fields;
      this.opts = opts;
      this.app = app;
      DBGT("initiate");
      this.web = null;
      this.routes = {};
      this.api_routes = {};
      this.wss = {};
      this.sys_helpers = this.opts.helpers;
      ref$ = this.sys_helpers, resource = ref$.resource, util = ref$.util;
      this.helpers = {
        composeError: composeError,
        composeData: composeData,
        trusted_ip: trusted_ip,
        trusted_ip_or_user: trusted_ip_or_user
      };
      this._opts = {
        upload_path: resource.resolveWorkPath('work', 'web/upload'),
        port: 6010,
        host: '0.0.0.0',
        headless: true,
        view_verbose: false,
        api: 1,
        express_partial_response: true,
        express_method_overrid: true,
        express_multer: true
      };
      fields = keys(this._opts);
      this._opts = util.copyObject(this._opts, this.opts, fields);
      if (!this._opts.headless) {
        this._opts.js_dest_path = resource.resolveWorkPath('work', 'web/dest');
      }
    }
    prototype.initiateLogger = function(){
      var logger, webMiddleware;
      logger = this.sys_helpers.logger;
      webMiddleware = expressBunyanLogger({
        logger: logger,
        immediate: false,
        levelFn: function(status, err){
          if (200 === status) {
            return 'debug';
          }
          if (201 === status) {
            return 'debug';
          }
          if (status >= 300 && status < 400) {
            return 'debug';
          }
          if (status >= 400 && status < 500) {
            return 'info';
          }
          if (status >= 500) {
            return 'error';
          }
          return 'warn';
        }
      });
      return this.web.use(webMiddleware);
    };
    prototype.initiateView = function(){
      var web, _opts, resource, js_path, img_path, css_path, jade_path, favicon_path, livescript_path, js_dest_path, jade, serveFavicon, livescriptMiddleware, compile;
      if (this._opts.headless) {
        return false;
      }
      web = this.web, _opts = this._opts;
      resource = this.sys_helpers.resource;
      js_path = resource.resolveResourcePath('assets', 'js');
      img_path = resource.resolveResourcePath('assets', 'img');
      css_path = resource.resolveResourcePath('assets', 'css');
      jade_path = resource.resolveResourcePath('assets', 'views');
      favicon_path = resource.resolveResourcePath('assets', 'img/favicon.ico');
      livescript_path = resource.resolveResourcePath('assets', 'ls');
      js_dest_path = _opts.js_dest_path;
      if (fs.existsSync(jade_path)) {
        jade = require('jade');
        INFO("set view engine: jade (" + jade_path.cyan + ")");
        web.set('views', jade_path);
        web.set('view engine', 'jade');
      } else {
        DBG("no view engine (the template directory " + jade_path.cyan + " does not exist)");
      }
      if (fs.existsSync(favicon_path)) {
        serveFavicon = require('serve-favicon');
        web.use(serveFavicon(favicon_path));
        INFO("set favicon (" + favicon_path.cyan + ")");
      } else {
        DBG("no favicon (the icon directory " + favicon_path.cyan + " does not exist)");
      }
      if (fs.existsSync(img_path)) {
        web.use('/img', express['static'](img_path));
        INFO("add /img");
      } else {
        DBG("no /img (" + img_path.cyan + " does not exist)");
      }
      if (fs.existsSync(css_path)) {
        web.use('/css', express['static'](css_path));
        INFO("add /css");
      } else {
        DBG("no /css (" + css_path.cyan + " does not exist)");
      }
      if (fs.existsSync(livescript_path)) {
        livescriptMiddleware = require('./livescript-middleware');
        compile = livescriptMiddleware({
          src: livescript_path,
          dest: js_dest_path
        });
        web.use('/js', compile, express['static'](js_dest_path));
        INFO("add /js (with livescript-middleware)");
      } else {
        DBG("no compiled /js (" + livescript_path.cyan + " does not exist)");
      }
      if (fs.existsSync(js_path)) {
        web.use('/js', express['static'](js_path));
        return INFO("add /js");
      } else {
        return DBG("no raw /js (" + js_path.cyan + " does not exist)");
      }
    };
    prototype.start = function(done){
      var resource, ref$, port, host, upload_path, web, multer, methodOverride, jade_path, i$, point, v, m, api, sio;
      DBGT("preparing middlewares ...");
      resource = this.sys_helpers.resource;
      ref$ = this._opts, port = ref$.port, host = ref$.host, upload_path = ref$.upload_path;
      this.web = web = express();
      this.server = http.createServer(this.web);
      web.set('trust proxy', true);
      web.use(bodyParser.json());
      web.use(bodyParser.urlencoded({
        extended: true
      }));
      DBGT("use middleware: body-parser");
      if (this._opts.express_multer) {
        multer = require('multer');
        web.use(multer({
          dest: upload_path
        }));
        DBGT("use middleware: multer");
      }
      if (this._opts.express_method_overrid) {
        methodOverride = require('method-override');
        web.use(methodOverride());
        DBGT("use middleware: method-override");
      }
      if (this._opts.view_verbose) {
        this.initiateLogger();
        this.initiateView();
      } else {
        this.initiateView();
        this.initiateLogger();
      }
      web.use(initiation);
      web.use(detectClientIp);
      jade_path = web.get('views');
      for (i$ in ref$ = this.routes) {
        (fn$.call(this, i$, ref$[i$]));
      }
      point = "/api/v" + this._opts.api + "/";
      v = this.api_v = new express();
      if (this._opts.express_partial_response) {
        m = require('express-partial-response');
        v.use(m());
      }
      INFO("using " + point + " (partial-response: " + this._opts.express_partial_response + ")");
      for (i$ in ref$ = this.api_routes) {
        (fn1$.call(this, i$, ref$[i$]));
      }
      api = this.api = new express();
      api.use("/v" + this._opts.api, v);
      web.use("/api", api);
      sio = require('socket.io');
      this.io = sio(this.server);
      this.server.on('listening', function(){
        var p;
        p = port + "";
        INFO("listening " + host.yellow + ":" + p.cyan);
        return done();
      });
      for (i$ in ref$ = this.wss) {
        (fn2$.call(this, i$, ref$[i$]));
      }
      DBGT("starting web server ...");
      return this.server.listen(port, host);
      function fn$(name, middleware){
        web.use("/" + name, middleware);
        INFO("add /" + name);
        if (jade_path != null) {
          middleware.set('views', jade_path);
          middleware.set('view engine', 'jade');
        }
      }
      function fn1$(name, middleware){
        v.use("/" + name, middleware);
        INFO("add " + point + name);
      }
      function fn2$(name, handler){
        var s;
        s = this.io.of(name);
        s.on('connection', handler);
        INFO("add handler for ws://localhost/" + name);
      }
    };
    prototype.use = function(name, middleware){
      if (this.web == null) {
        return this.routes[name] = middleware;
      }
    };
    prototype.useApi = function(name, middleware){
      if (this.web == null) {
        return this.api_routes[name] = middleware;
      }
    };
    prototype.useWs = function(name, handler){
      if (this.web == null) {
        return this.wss[name] = handler;
      }
    };
    return WebServer;
  }());
  module.exports = exports = {
    name: NAME,
    attach: function(opts){
      module.logger = opts.helpers.logger;
      DBGT = function(){
        return module.logger.debug.apply(module.logger, arguments);
      };
      INFO = function(){
        return module.logger.info.apply(module.logger, arguments);
      };
      ERR = function(){
        return module.logger.error.apply(module.logger, arguments);
      };
      return this.web = new WebServer(opts, this);
    },
    init: function(done){
      var web, util, _opts, dirs;
      web = this.web;
      util = web.sys_helpers.util;
      _opts = web._opts;
      dirs = [_opts.upload_path];
      if (!_opts.headless) {
        dirs.push(_opts.js_dest_path);
      }
      return util.createDirectories(dirs, function(err){
        return done(err);
      });
    }
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);
