(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var yapps, app;
  yapps = require('yapps');
  app = yapps.createApp('web', {
    plugins: [],
    verbose: true
  });
  app.init(function(err){
    if (err != null) {
      console.error("exit with err: " + err);
    }
    if (err != null) {
      return process.exit(1);
    }
    return INFO("App ready!!");
  });
}).call(this);

},{"yapps":5}],2:[function(require,module,exports){
(function (__dirname){
// Generated by LiveScript 1.4.0
(function(){
  var express, http, fs, path, colors, handlebars, bodyParser, expressBunyanLogger, ref$, elemIndex, keys, error_responses, NAME, DBGT, INFO, ERR, composeError, composeData, initiation, detectClientIp, trusted_ip, trusted_ip_or_user, secretCurrying, WebServer, exports;
  express = require('express');
  http = require('http');
  fs = require('fs');
  path = require('path');
  colors = require('colors');
  handlebars = require('handlebars');
  bodyParser = require('body-parser');
  expressBunyanLogger = require('express-bunyan-logger');
  ref$ = require('prelude-ls'), elemIndex = ref$.elemIndex, keys = ref$.keys;
  error_responses = require(__dirname + "/web_errors");
  NAME = 'web';
  DBGT = null;
  INFO = null;
  ERR = null;
  composeError = function(req, res, name, err){
    var r, template, context, msg, result;
    err == null && (err = null);
    if (error_responses[name] != null) {
      r = error_responses[name];
      template = handlebars.compile(r.message);
      context = {
        ip: req.ip,
        originalUrl: req.originalUrl,
        err: err
      };
      msg = template(context);
      result = {
        code: r.code,
        error: name,
        url: req.originalUrl,
        message: msg
      };
      ERR(req.method + " " + colors.yellow(req.url) + " " + colors.green(name) + " json = " + JSON.stringify(result));
      return res.status(r.status).json(result);
    } else {
      ERR(colors.yellow(req.url) + " " + colors.green(name) + " json = unknown error");
      return res.status(500).json({
        error: "unknown error: " + name
      });
    }
  };
  composeData = function(req, res, data, code){
    var result;
    code == null && (code = 200);
    result = {
      code: 0,
      error: null,
      message: null,
      url: req.originalUrl,
      data: data
    };
    return res.status(code).json(result);
  };
  initiation = function(req, res, next){
    req.web_context = {};
    return next();
  };
  detectClientIp = function(req, res, next){
    var ip, web_context;
    ip = req.ip;
    web_context = req.web_context;
    web_context.trusted_ip = false;
    if (ip === "127.0.0.1") {
      web_context.trusted_ip = true;
    }
    if (ip.startsWith("192.168.")) {
      web_context.trusted_ip = true;
    }
    if (undefined !== elemIndex(ip, ['118.163.145.217', '118.163.145.218', '118.163.145.219', '118.163.145.220', '118.163.145.221', '118.163.145.222', '59.87.11.170'])) {
      web_context.trusted_ip = true;
    }
    return next();
  };
  trusted_ip = function(req, res, next){
    if (!req.web_context.trusted_ip) {
      return composeError(req, res, 'untrusted_ip');
    }
    return next();
  };
  trusted_ip_or_user = function(req, res, next){
    req.user = {
      name: 'localhost'
    };
    return next();
  };
  secretCurrying = curry$(function(webserver, name, password, done){
    return webserver.secretCheck(name, password, done);
  });
  WebServer = (function(){
    WebServer.displayName = 'WebServer';
    var prototype = WebServer.prototype, constructor = WebServer;
    function WebServer(opts, app){
      var ref$, resource, util, fields;
      this.opts = opts;
      this.app = app;
      DBGT("initiate");
      this.web = null;
      this.routes = {};
      this.api_routes = {};
      this.wss = {};
      this.sys_helpers = this.opts.helpers;
      ref$ = this.sys_helpers, resource = ref$.resource, util = ref$.util;
      this.helpers = {
        composeError: composeError,
        composeData: composeData,
        trusted_ip: trusted_ip,
        trusted_ip_or_user: trusted_ip_or_user
      };
      this._opts = {
        upload_path: resource.resolveWorkPath('work', 'web/upload'),
        port: 6010,
        host: '0.0.0.0',
        headless: true,
        view_verbose: false,
        api: 1,
        express_partial_response: true,
        express_method_overrid: true,
        express_multer: true
      };
      fields = keys(this._opts);
      this._opts = util.copyObject(this._opts, this.opts, fields);
      if (!this._opts.headless) {
        this._opts.js_dest_path = resource.resolveWorkPath('work', 'web/dest');
      }
    }
    prototype.initiateLogger = function(){
      var logger, webMiddleware;
      logger = this.sys_helpers.logger;
      webMiddleware = expressBunyanLogger({
        logger: logger,
        immediate: false,
        levelFn: function(status, err){
          if (200 === status) {
            return 'debug';
          }
          if (201 === status) {
            return 'debug';
          }
          if (status >= 300 && status < 400) {
            return 'debug';
          }
          if (status >= 400 && status < 500) {
            return 'info';
          }
          if (status >= 500) {
            return 'error';
          }
          return 'warn';
        }
      });
      return this.web.use(webMiddleware);
    };
    prototype.initiateView = function(){
      var web, _opts, resource, js_path, img_path, css_path, jade_path, favicon_path, livescript_path, js_dest_path, jade, serveFavicon, livescriptMiddleware, compile;
      if (this._opts.headless) {
        return false;
      }
      web = this.web, _opts = this._opts;
      resource = this.sys_helpers.resource;
      js_path = resource.resolveResourcePath('assets', 'js');
      img_path = resource.resolveResourcePath('assets', 'img');
      css_path = resource.resolveResourcePath('assets', 'css');
      jade_path = resource.resolveResourcePath('assets', 'views');
      favicon_path = resource.resolveResourcePath('assets', 'img/favicon.ico');
      livescript_path = resource.resolveResourcePath('assets', 'ls');
      js_dest_path = _opts.js_dest_path;
      if (fs.existsSync(jade_path)) {
        jade = require('jade');
        INFO("set view engine: jade (" + jade_path.cyan + ")");
        web.set('views', jade_path);
        web.set('view engine', 'jade');
      } else {
        DBG("no view engine (the template directory " + jade_path.cyan + " does not exist)");
      }
      if (fs.existsSync(favicon_path)) {
        serveFavicon = require('serve-favicon');
        web.use(serveFavicon(favicon_path));
        INFO("set favicon (" + favicon_path.cyan + ")");
      } else {
        DBG("no favicon (the icon directory " + favicon_path.cyan + " does not exist)");
      }
      if (fs.existsSync(img_path)) {
        web.use('/img', express['static'](img_path));
        INFO("add /img");
      } else {
        DBG("no /img (" + img_path.cyan + " does not exist)");
      }
      if (fs.existsSync(css_path)) {
        web.use('/css', express['static'](css_path));
        INFO("add /css");
      } else {
        DBG("no /css (" + css_path.cyan + " does not exist)");
      }
      if (fs.existsSync(livescript_path)) {
        livescriptMiddleware = require('./livescript-middleware');
        compile = livescriptMiddleware({
          src: livescript_path,
          dest: js_dest_path
        });
        web.use('/js', compile, express['static'](js_dest_path));
        INFO("add /js (with livescript-middleware)");
      } else {
        DBG("no compiled /js (" + livescript_path.cyan + " does not exist)");
      }
      if (fs.existsSync(js_path)) {
        web.use('/js', express['static'](js_path));
        return INFO("add /js");
      } else {
        return DBG("no raw /js (" + js_path.cyan + " does not exist)");
      }
    };
    prototype.start = function(done){
      var resource, ref$, port, host, upload_path, web, multer, methodOverride, jade_path, i$, point, v, m, api, sio;
      DBGT("preparing middlewares ...");
      resource = this.sys_helpers.resource;
      ref$ = this._opts, port = ref$.port, host = ref$.host, upload_path = ref$.upload_path;
      this.web = web = express();
      this.server = http.createServer(this.web);
      web.set('trust proxy', true);
      web.use(bodyParser.json());
      web.use(bodyParser.urlencoded({
        extended: true
      }));
      DBGT("use middleware: body-parser");
      if (this._opts.express_multer) {
        multer = require('multer');
        web.use(multer({
          dest: upload_path
        }));
        DBGT("use middleware: multer");
      }
      if (this._opts.express_method_overrid) {
        methodOverride = require('method-override');
        web.use(methodOverride());
        DBGT("use middleware: method-override");
      }
      if (this._opts.view_verbose) {
        this.initiateLogger();
        this.initiateView();
      } else {
        this.initiateView();
        this.initiateLogger();
      }
      web.use(initiation);
      web.use(detectClientIp);
      jade_path = web.get('views');
      for (i$ in ref$ = this.routes) {
        (fn$.call(this, i$, ref$[i$]));
      }
      point = "/api/v" + this._opts.api + "/";
      v = this.api_v = new express();
      if (this._opts.express_partial_response) {
        m = require('express-partial-response');
        v.use(m());
      }
      INFO("using " + point + " (partial-response: " + this._opts.express_partial_response + ")");
      for (i$ in ref$ = this.api_routes) {
        (fn1$.call(this, i$, ref$[i$]));
      }
      api = this.api = new express();
      api.use("/v" + this._opts.api, v);
      web.use("/api", api);
      sio = require('socket.io');
      this.io = sio(this.server);
      this.server.on('listening', function(){
        var p;
        p = port + "";
        INFO("listening " + host.yellow + ":" + p.cyan);
        return done();
      });
      for (i$ in ref$ = this.wss) {
        (fn2$.call(this, i$, ref$[i$]));
      }
      DBGT("starting web server ...");
      return this.server.listen(port, host);
      function fn$(name, middleware){
        web.use("/" + name, middleware);
        INFO("add /" + name);
        if (jade_path != null) {
          middleware.set('views', jade_path);
          middleware.set('view engine', 'jade');
        }
      }
      function fn1$(name, middleware){
        v.use("/" + name, middleware);
        INFO("add " + point + name);
      }
      function fn2$(name, handler){
        var s;
        s = this.io.of(name);
        s.on('connection', handler);
        INFO("add handler for ws://localhost/" + name);
      }
    };
    prototype.use = function(name, middleware){
      if (this.web == null) {
        return this.routes[name] = middleware;
      }
    };
    prototype.useApi = function(name, middleware){
      if (this.web == null) {
        return this.api_routes[name] = middleware;
      }
    };
    prototype.useWs = function(name, handler){
      if (this.web == null) {
        return this.wss[name] = handler;
      }
    };
    return WebServer;
  }());
  module.exports = exports = {
    name: NAME,
    attach: function(opts){
      module.logger = opts.helpers.logger;
      DBGT = function(){
        return module.logger.debug.apply(module.logger, arguments);
      };
      INFO = function(){
        return module.logger.info.apply(module.logger, arguments);
      };
      ERR = function(){
        return module.logger.error.apply(module.logger, arguments);
      };
      return this.web = new WebServer(opts, this);
    },
    init: function(done){
      var web, util, _opts, dirs;
      web = this.web;
      util = web.sys_helpers.util;
      _opts = web._opts;
      dirs = [_opts.upload_path];
      if (!_opts.headless) {
        dirs.push(_opts.js_dest_path);
      }
      return util.createDirectories(dirs, function(err){
        return done(err);
      });
    }
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);

}).call(this,"/Users/yagamy/Work/workspaces/t2t/sandbox/externals/testbox/sensor-web-exp1/modules/y-web")

},{"./livescript-middleware":3,"body-parser":"body-parser","colors":"colors","express":"express","express-bunyan-logger":"express-bunyan-logger","express-partial-response":"express-partial-response","fs":undefined,"handlebars":"handlebars","http":undefined,"jade":"jade","method-override":"method-override","multer":"multer","path":undefined,"prelude-ls":"prelude-ls","serve-favicon":"serve-favicon","socket.io":"socket.io"}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
/*
 * Livescript middleware
 * copied from Stylus middleware
 */
(function(){
  /**
   * Module dependencies.
   */
  /*
  require! {
    'uglify-js': {minify}
    LiveScript: livescript
  
    fs
    url
    path: {join, sep, dirname}
    mkdirp
  }
  */
  var minify, livescript, fs, url, mkdirp, path, join, sep, dirname, defaults;
  minify = require('uglify-js').minify;
  livescript = require('livescript');
  fs = require('fs');
  url = require('url');
  mkdirp = require('mkdirp');
  path = require('path');
  join = path.join, sep = path.sep, dirname = path.dirname;
  defaults = {
    compress: false
  };
  module.exports = function(options){
    var dest, src;
    options == null && (options = {});
    if (typeof options === 'string') {
      options = {
        src: options
      };
    }
    options = import$(defaults, options);
    dest = options.dest, src = options.src;
    if (src == null) {
      throw new Error('livescript.middleware() requires "src" directory');
    }
    dest || (dest = src);
    options.compile || (options.compile = function(str, path){
      return livescript.compile(str, {
        bare: options.bare
      });
    });
    return function(req, res, next){
      var path, overlap, jsPath, lsPath, error;
      if (!arrayContains(['GET', 'HEAD'], req.method)) {
        return next();
      }
      path = url.parse(req.url).pathname;
      if (!/\.js$/.test(path)) {
        return next();
      }
      if (arrayContains(['string', 'function'], typeof dest)) {
        overlap = compare(typeof dest === 'function' ? dest(path) : dest, path);
        path = path.slice(overlap.length);
      }
      jsPath = typeof dest === 'function'
        ? dest(path)
        : join(dest, path);
      lsPath = typeof src === 'function'
        ? src(path)
        : join(src, path.replace('.js', '.ls'));
      error = function(err){
        return next(err.code === 'ENOENT' ? null : err);
      };
      if (options.force) {
        return compile();
      }
      fs.stat(lsPath, function(err, lsStats){
        if (err) {
          return error(err);
        }
        return fs.stat(jsPath, function(err, jsStats){
          if (err) {
            if (err.code === 'ENOENT') {
              return compile();
            } else {
              return next(err);
            }
          } else {
            if (lsStats.mtime > jsStats.mtime) {
              return compile();
            } else {
              return next();
            }
          }
        });
      });
      function compile(){
        return fs.readFile(lsPath, 'utf8', function(err, str){
          var js;
          if (err) {
            return error(err);
          }
          try {
            js = options.compile(str, {});
            if (options.compress) {
              js = minify(js, {
                fromString: true
              }).code;
            }
            return mkdirp(dirname(jsPath), 448, function(err){
              if (err) {
                return error(err);
              }
              return fs.writeFile(jsPath, js, 'utf8', next);
            });
          } catch (e$) {
            err = e$;
            return error(err);
          }
        });
      }
      return compile;
    };
  };
  function arrayContains(haystack, needle){
    return -1 !== haystack.indexOf(needle);
  }
  /**
   * get the overlapping path from the end of path A, and the begining of path B.
   *
   * @param {String} pathA
   * @param {String} pathB
   * @return {String}
   * @api private
   */
  function compare(pathA, pathB){
    var overlap;
    pathA = pathA.split(sep);
    pathB = pathB.split(sep);
    overlap = [];
    while (pathA[pathA.length - 1] === pathB[0]) {
      overlap.push(pathA.pop());
      pathB.shift();
    }
    return overlap.join(sep);
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"fs":undefined,"livescript":"livescript","mkdirp":"mkdirp","path":undefined,"uglify-js":"uglify-js","url":undefined}],4:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var express, keys, NAME, DBGT, exports;
  express = require('express');
  keys = require('prelude-ls').keys;
  NAME = 'std-webapi';
  DBGT = null;
  module.exports = exports = {
    name: NAME,
    attach: function(opts){
      module.logger = opts.helpers.logger;
      DBGT = function(){
        return module.logger.debug.apply(module.logger, arguments);
      };
    },
    init: function(done){
      var app, web, parent, ref$, composeError, composeData, std;
      app = this;
      web = app.web, parent = app.parent;
      ref$ = web.helpers, composeError = ref$.composeError, composeData = ref$.composeData;
      std = express();
      std.get('/config', function(req, res){
        var api_routes, wss, plugins, plugin_names, i$, len$, config;
        api_routes = web.api_routes, wss = web.wss;
        plugins = parent.plugin_instances;
        plugin_names = [];
        for (i$ = 0, len$ = plugins.length; i$ < len$; ++i$) {
          (fn$.call(this, i$, plugins[i$]));
        }
        config = {
          name: parent.name,
          type: parent.type,
          plugins: plugin_names,
          api_endpoints: keys(api_routes),
          websocket_namespaces: keys(wss),
          opts: web._opts
        };
        return composeData(req, res, config, 200);
        function fn$(i, p){
          plugin_names.push(p.name);
        }
      });
      std.get('/hello', function(req, res){
        return res.send("world");
      });
      std.get('/time', function(req, res){
        return res.send(JSON.stringify(new Date()) + "");
      });
      std.get('/exit', function(req, res){
        var exit;
        res.send("will shutdown gracefully ...\n");
        exit = function(){
          return process.exit(0);
        };
        return setTimeout(exit, 1000);
      });
      std.get('/restart', function(req, res){
        var exit;
        res.send("will restart immediately ...\n");
        exit = function(){
          return process.exit(230);
        };
        return setTimeout(exit, 1000);
      });
      web.useApi('std', std);
      return done();
    }
  };
}).call(this);

},{"express":"express","prelude-ls":"prelude-ls"}],5:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var loggerCurrying, createApplication, findName, exports;
  loggerCurrying = curry$(function(name, level, message){
    return console.error("yapps[" + name + "]:" + level + ": " + message);
  });
  createApplication = function(type, opts){
    var helpers, app_class, app, error;
    if (opts.verbose != null && opts.verbose) {
      global.DBG = loggerCurrying(type, 'debug');
    } else {
      global.DBG = function(message){};
    }
    global.INFO = loggerCurrying(type, 'info');
    try {
      helpers = {
        util: require('./lib/util'),
        resource: require('./lib/resource'),
        timer: require('./lib/timer'),
        asyncExecutor: require('./lib/async-executor')
      };
      app_class = type === 'web'
        ? require('./lib/apps/WebApp')
        : require('./lib/apps/BaseApp');
      app = new app_class(opts, helpers);
      return app;
    } catch (e$) {
      error = e$;
      INFO("failed to createApplication '" + type + "', err: " + error);
      return process.exit(1);
    }
  };
  findName = function(){
    var ex, regexp, matches, line, tokens;
    ex = new Error();
    regexp = /\(.*\/app.(j|l)s:.*\)/;
    matches = regexp.exec(ex.stack);
    if (matches == null) {
      return 'unknown';
    }
    line = matches[0];
    line = line.substring(1, line.length - 2);
    line.replace(/:.*/, "");
    tokens = line.split('/');
    if (!(tokens.length >= 2)) {
      return 'unknown';
    }
    return tokens[tokens.length - 2];
  };
  module.exports = exports = {
    createApp: function(type, opts){
      var app_type, app_opts;
      app_type = null;
      app_opts = null;
      if (type != null) {
        if ('string' === typeof type) {
          app_type = type;
          app_opts = opts;
        } else if ('object' === typeof type) {
          app_type = 'base';
          app_opts = type;
        }
      } else {
        app_type = 'base';
        app_opts = {};
      }
      if (app_opts.name == null) {
        app_opts.name = findName();
      }
      return createApplication(app_type, app_opts);
    }
  };
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);

},{"./lib/apps/BaseApp":6,"./lib/apps/WebApp":7,"./lib/async-executor":8,"./lib/resource":9,"./lib/timer":10,"./lib/util":11}],6:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var broadway, optimist, extendify, bunyan, bunyanDebugStream, bunyanRotatingFile, path, colors, applyCmdConfigs, InitFunctions, BaseApp, exports;
  if (process.env['TIME_REQUIRE'] === "true") {
    require('time-require');
  }
  broadway = require('broadway');
  optimist = require('optimist');
  extendify = require('extendify');
  bunyan = require('bunyan');
  bunyanDebugStream = require('bunyan-debug-stream');
  bunyanRotatingFile = require('bunyan-rotating-file');
  path = require('path');
  colors = require('colors');
  applyCmdConfigs = function(settings, type){
    var i$, len$, s, tokens, prop, value, names, lastName, config, j$, len1$, n, results$ = [];
    if (!settings) {
      return;
    }
    settings = settings instanceof Array
      ? settings
      : [settings];
    for (i$ = 0, len$ = settings.length; i$ < len$; ++i$) {
      s = settings[i$];
      tokens = s.split("=");
      prop = tokens[0];
      value = tokens[1];
      if ('"' === value.charAt(0) && '"' === value.charAt(value.length - 1)) {
        value = value.substr(1, value.length - 2);
      } else {
        if ("'" === value.charAt(0) && "'" === value.charAt(value.length - 1)) {
          value = value.substr(1, value.length - 2);
        }
      }
      names = prop.split(".");
      lastName = names.pop();
      config = global.config;
      for (j$ = 0, len1$ = names.length; j$ < len1$; ++j$) {
        n = names[j$];
        config = config[n];
      }
      switch (type) {
      case "string":
        config[lastName] = value;
        break;
      case "integer":
        config[lastName] = parseInt(value);
        break;
      case "boolean":
        config[lastName] = "true" === value.toLowerCase();
        break;
      case "str_array":
        config[lastName] = value.split(',');
        break;
      default:
        config[lastName] = value;
      }
      results$.push(INFO("applying " + prop + " = " + config[lastName]));
    }
    return results$;
  };
  InitFunctions = [
    {
      name: 'string-helpers',
      func: function(){
        if (typeof String.prototype.startsWith !== 'function') {
          String.prototype.startsWith = function(str){
            return str === this.substring(0, str.length);
          };
        }
        if (typeof String.prototype.endsWith !== 'function') {
          return String.prototype.endsWith = function(str){
            return str === this.substring(this.length - str.length, this.length);
          };
        }
      }
    }, {
      name: 'load-config',
      func: function(){
        var resource, opt;
        resource = module.resource;
        opt = optimist.usage('Usage: $0').alias('c', 'config').describe('c', 'the configuration set, might be default, bbb0, ...')['default']('c', 'default').alias('b', 'config_bool').describe('b', 'overwrite a configuration with boolean value, e.g. -b "system.influxServer.secure=false"').alias('s', 'config_string').describe('s', 'overwrite a configuration with boolean value, e.g. -b "system.influxServer.user=smith"').alias('i', 'config_int').describe('i', 'overwrite a configuration with int value, e.g. -b "behavior.notify.influxPeriod=smith"').alias('a', 'config_str_array').describe('a', 'overwrite a configuration with array of strings with delimiter character `COMMA`, e.g. -b "system.influxServer.clusters=aa.test.net,bb.test.net,cc.test.net"').alias('v', 'verbose').describe('v', 'verbose message output (level is changed to `debug`)')['default']('v', false).alias('q', 'quiet').describe('q', 'disable logging outputs to local file, but still outputs to stderr')['default']('q', false).boolean(['h', 'v']);
        global.argv = opt.argv;
        if (global.argv.h) {
          opt.showHelp();
          process.exit(0);
        }
        global.config = resource.loadConfig(global.argv.config);
        if (global.config == null) {
          return process.exit(1);
        }
        applyCmdConfigs(global.argv.s, "string");
        applyCmdConfigs(global.argv.i, "integer");
        applyCmdConfigs(global.argv.b, "boolean");
        return applyCmdConfigs(global.argv.a, "str_array");
      }
    }
  ];
  BaseApp = (function(){
    BaseApp.displayName = 'BaseApp';
    var prototype = BaseApp.prototype, constructor = BaseApp;
    function BaseApp(opts, helpers){
      this.opts = opts;
      this.helpers = helpers;
      DBG("BaseApp constructor");
      this.type = 'base';
      this.name = this.opts.name;
      this.resource = module.resource = helpers.resource;
      this.asyncExecutor = helpers.asyncExecutor;
      this.plugin_instances = [];
    }
    prototype.addPlugin = function(p){
      return this.opts.plugins.push(p);
    };
    prototype.initLogger = function(){
      var plugins, resource, app_name, prefixers, stringifiers, level, logging_dir, logging_opts, logger, app_logger, global_logger;
      plugins = this.opts.plugins;
      resource = this.resource;
      app_name = this.name;
      prefixers = {
        module: function(m){
          if (m.plugin != null && m.plugin) {
            return "plugin::" + m.name;
          }
          if (m.debug != null && m.debug) {
            return "debug::" + m.name;
          }
          return m.name;
        }
      };
      stringifiers = {
        config: function(c){
          return JSON.stringify(c, null, 4);
        }
      };
      /*
      for let p, i in plugins
        config = global.config[p]
        if config? and config[\logger]?
          log_config = config.logger
          if log_config[\prefixers]?
            for let name, func of log_config.prefixers
              if prefixers[name]?
                INFO "plugin[#{p}] loads a duplicate logging prefixer <#{name}>"
              else
                prefixers[name] = func
      
          if log_config[\stringifiers]?
            for let name, func of log_config.stringifiers
              if stringifiers[name]?
                INFO "plugin[#{p}] loads a duplicate logging prefixer <#{name}>"
              else
                stringifiers[name] = func
      */
      if (global.argv.v != null && global.argv.v) {
        DBG("verbose (-v) is enabled");
      }
      level = global.argv.v ? 'debug' : 'info';
      logging_dir = resource.resolveWorkPath('logs', '');
      logging_opts = {
        name: app_name,
        serializers: bunyanDebugStream.serializers,
        streams: [
          {
            level: level,
            type: 'raw',
            stream: bunyanDebugStream({
              out: process.stderr,
              showProcess: false,
              colors: {
                debug: 'gray',
                info: 'white'
              },
              prefixers: prefixers,
              stringifiers: stringifiers
            })
          }, {
            level: 'debug',
            type: 'rotating-file',
            path: logging_dir + "" + path.sep + "/app.log",
            period: '1d',
            count: 7
          }
        ]
      };
      if (global.argv.q) {
        logging_opts.streams.pop();
      }
      this.extendify = extendify();
      if (global.config.logger != null) {
        logging_opts = this.extendify(logging_opts, global.config.logger);
      }
      global.yapp_logger = logger = bunyan.createLogger(logging_opts);
      app_logger = this.logger = logger.child({
        module: {
          name: 'BaseApp'
        }
      });
      app_logger.debug("logger initiated");
      global_logger = logger.child({
        module: {
          name: 'GLOBAL'
        }
      });
      global.DBG = function(){
        return global_logger.debug.apply(global_logger, arguments);
      };
      global.INFO = function(){
        return global_logger.info.apply(global_logger, arguments);
      };
      global.WARN = function(){
        return global_logger.warn.apply(global_logger, arguments);
      };
      global.ERR = function(){
        return global_logger.error.apply(global_logger, arguments);
      };
      global.FATAL = function(){
        return global_logger.fatal.apply(global_logger, arguments);
      };
      return module.DBGT = function(){
        return app_logger.debug.apply(app_logger, arguments);
      };
    };
    prototype.init = function(done){
      var self, asyncExecutor, resource, opts, plugins, i$, ref$, len$, app, tasks, logger, config, context, ae;
      self = this;
      asyncExecutor = self.asyncExecutor, resource = self.resource, opts = self.opts;
      plugins = opts.plugins;
      for (i$ = 0, len$ = (ref$ = InitFunctions).length; i$ < len$; ++i$) {
        (fn$.call(this, i$, ref$[i$]));
      }
      this.initLogger();
      app = this.app = new broadway.App;
      app.parent = self;
      tasks = [
        {
          name: 'dummy',
          func: function(ae, ctx, dbg, done){
            return done();
          }
        }, {
          name: 'load-plugins',
          func: function(ae, ctx, dbg, done){
            var config, app, plugins, self, i$, len$;
            config = ctx.config, app = ctx.app, plugins = ctx.plugins, self = ctx.self;
            for (i$ = 0, len$ = plugins.length; i$ < len$; ++i$) {
              (fn$.call(this, i$, plugins[i$]));
            }
            return done();
            function fn$(i, p){
              var name, logger, helpers, c, error;
              try {
                name = p.NAME;
                logger = self.logger.child({
                  module: {
                    plugin: true,
                    name: name
                  }
                });
                helpers = {
                  logger: logger
                };
                helpers = self.extendify(helpers, self.helpers);
                c = {};
                if (config[name] != null) {
                  c = self.extendify(c, config[name]);
                }
                c = self.extendify(c, {
                  helpers: helpers
                });
                app.use(p, c);
                self.plugin_instances.push(p);
              } catch (e$) {
                error = e$;
                return done(error);
              }
            }
          }
        }, {
          name: 'init-plugins',
          func: function(ae, ctx, dbg, done){
            var app;
            app = ctx.app;
            return app.init(function(err){
              return done(err);
            });
          }
        }, {
          name: 'startup-plugins',
          func: function(ae, ctx, dbg, done){
            dbg("enter");
            return done();
          }
        }
      ];
      logger = self.logger;
      config = global.config;
      context = {
        config: config,
        resource: resource,
        app: app,
        plugins: plugins,
        self: self
      };
      ae = new asyncExecutor({
        type: 'app',
        logger: module.DBGT,
        context: context
      });
      return ae.series(tasks, function(executor, ctx, err, results){
        if (process.env['TIME_REQUIRE'] === "true") {
          return process.exit(0);
        }
        if (err == null) {
          return done();
        }
        self.logger.error(err, "initialization failure");
        return done(err);
      });
      function fn$(i, init_func){
        DBG("booting: " + init_func.name + " ...");
        init_func.func();
      }
    };
    prototype.get = function(name){
      return this.app[name];
    };
    prototype.on = function(){
      var onFunc;
      onFunc = this.app.on;
      return onFunc.apply(this.app, arguments);
    };
    return BaseApp;
  }());
  module.exports = exports = BaseApp;
}).call(this);

},{"broadway":"broadway","bunyan":"bunyan","bunyan-debug-stream":"bunyan-debug-stream","bunyan-rotating-file":"bunyan-rotating-file","colors":"colors","extendify":"extendify","optimist":"optimist","path":undefined,"time-require":"time-require"}],7:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var yWeb, yWebapiStd, BaseApp, WebApp, exports;
  yWeb = require('y-web');
  yWebapiStd = require('y-webapi-std');
  BaseApp = require("./BaseApp");
  WebApp = (function(superclass){
    var prototype = extend$((import$(WebApp, superclass).displayName = 'WebApp', WebApp), superclass).prototype, constructor = WebApp;
    function WebApp(opts, helpers){
      this.opts = opts;
      this.helpers = helpers;
      WebApp.superclass.call(this, opts, helpers);
      this.addPlugin(require('y-web'));
      this.addPlugin(require('y-webapi-std'));
    }
    prototype.init = function(done){
      var self;
      self = this;
      return superclass.prototype.init.call(this, function(err){
        var web;
        if (err != null) {
          return done(err);
        }
        web = self.app.web;
        return web.start(done);
      });
    };
    return WebApp;
  }(BaseApp));
  module.exports = exports = WebApp;
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);

},{"./BaseApp":6,"y-web":2,"y-webapi-std":4}],8:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var async, colors, uid, loggerCurrying, runTaskCurrying, seriesEndCurrying, exports, AsyncExecutor;
  async = require('async');
  colors = require('colors');
  uid = require('uid');
  loggerCurrying = curry$(function(executor, task_name, logger, message){
    var num, id, prefix, text;
    num = executor.num + "";
    id = executor.id + "-" + num;
    prefix = executor.type + "[" + id.gray + "]." + task_name;
    text = prefix + " " + message;
    if (logger != null) {
      return logger(text);
    }
    return console.log(text);
  });
  runTaskCurrying = curry$(function(executor, context, logger, task_name, func, cb){
    var DBG, error;
    DBG = loggerCurrying(executor, task_name, logger);
    try {
      return func(executor, context, DBG, function(err, result){
        return cb(err, result);
      });
    } catch (e$) {
      error = e$;
      DBG(error.stack.red + "");
      return cb(error, null);
    }
  });
  seriesEndCurrying = curry$(function(executor, cb, err, results){
    return cb(executor, executor.context, err, results);
  });
  module.exports = exports = AsyncExecutor = (function(){
    AsyncExecutor.displayName = 'AsyncExecutor';
    var prototype = AsyncExecutor.prototype, constructor = AsyncExecutor;
    function AsyncExecutor(options){
      var type, logger, context, id;
      this.options = options;
      if (options != null) {
        type = options.type, logger = options.logger, context = options.context, id = options.id;
      }
      this.context = context != null
        ? context
        : {};
      this.type = type != null ? type : "unknown";
      this.logger = logger != null
        ? logger
        : console.log;
      this.id = id != null
        ? id
        : uid();
      this.num = 0;
    }
    prototype.series = function(tasks, callback){
      var new_funcs, i$, len$, end;
      new_funcs = [];
      for (i$ = 0, len$ = tasks.length; i$ < len$; ++i$) {
        (fn$.call(this, i$, tasks[i$]));
      }
      end = seriesEndCurrying(this, callback);
      async.series(new_funcs, end);
      return this.num = this.num + 1;
      function fn$(i, t){
        var func;
        func = runTaskCurrying(this, this.context, this.logger, t.name, t.func);
        new_funcs.push(func);
      }
    };
    return AsyncExecutor;
  }());
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);

},{"async":"async","colors":"colors","uid":"uid"}],9:[function(require,module,exports){
(function (__dirname){
// Generated by LiveScript 1.4.0
(function(){
  var fs, path, async, settings, DEBUG, CHECK, LOAD_CONFIG, resource, exports;
  fs = require('fs');
  path = require('path');
  async = require('async');
  settings = {
    program_name: null,
    app_dir: null,
    work_dir: null,
    config_dir: null
  };
  DEBUG = function(message){
    if (process.env.VERBOSE) {
      return console.error(message);
    }
  };
  CHECK = function(p){
    var config_dir, log_dir, dirs, error;
    config_dir = path.resolve(p + "" + path.sep + "config");
    log_dir = path.resolve(p + "" + path.sep + "logs");
    DEBUG("checking " + path.resolve(p));
    try {
      dirs = fs.readdirSync(config_dir);
      if (!fs.existsSync(log_dir)) {
        fs.mkdirSync(log_dir);
      }
      settings.work_dir = p;
      settings.config_dir = config_dir;
      console.log("use " + path.resolve(p) + " as work_dir");
      return console.log("use " + settings.app_dir + " as app_dir");
    } catch (e$) {
      error = e$;
      return DEBUG("checking " + path.resolve(p) + " but failed");
    }
  };
  if (process.argv[1] != null) {
    settings.program_name = path.basename(process.argv[1]);
  } else {
    settings.program_name = "unknown";
  }
  if (process.argv[1] != null) {
    settings.app_dir = path.dirname(process.argv[1]);
  } else {
    settings.app_dir = process.cwd();
  }
  if (process.env['WORK_DIR'] != null) {
    CHECK(process.env['WORK_DIR']);
  }
  if (!settings.work_dir) {
    CHECK(path.resolve("."));
  }
  if (!settings.work_dir && process.argv[1] != null) {
    CHECK(path.dirname(process.argv[1]));
  }
  if (!settings.work_dir) {
    console.error("failed to find any work directory.");
    if (process.env.VERBOSE == null) {
      console.error("please re-run the program with environment variable VERBOSE=true to get further verbose messages...");
    }
    process.exit(1);
  }
  LOAD_CONFIG = function(p, callback){
    var found, config, error;
    found = false;
    try {
      config = p.json
        ? JSON.parse(fs.readFileSync(p.path))
        : require(p.path);
      found = true;
      callback(null, config);
    } catch (e$) {
      error = e$;
      DBG("failed to load " + p.path + " due to error: " + error);
    }
    return found;
  };
  resource = {
    /**
     * Dump all enviroment variables
     */
    dumpEnvs: function(){
      var i$, ref$, len$;
      for (i$ = 0, len$ = (ref$ = process.argv).length; i$ < len$; ++i$) {
        (fn$.call(this, i$, ref$[i$]));
      }
      DBG("process.execPath = " + process.execPath);
      DBG("process.arch = " + process.arch);
      DBG("process.platform = " + process.platform);
      DBG("process.cwd() = " + process.cwd());
      DBG("path.normalize('.') = " + path.normalize('.'));
      DBG("path.normalize(__dirname) = " + path.normalize(__dirname));
      DBG("path.resolve('.') = " + path.resolve('.'));
      return DBG("path.resolve(__dirname) = " + path.resolve(__dirname));
      function fn$(i, v){
        DBG("argv[" + i + "] = " + v);
      }
    }
    /**
     * Load configuration file from following files in order
     *   - ${config_dir}/${name}.ls
     *   - ${config_dir}/${name}.js
     *   - ${config_dir}/${name}.json
     *
     * @param name, the name of configuration file to be loaded.
     */,
    loadConfig: function(name, callback){
      var pathes, ret, i$, len$, p, text, error;
      pathes = [
        {
          path: settings.config_dir + "" + path.sep + name + ".ls",
          json: false
        }, {
          path: settings.config_dir + "" + path.sep + name + ".json",
          json: true
        }
      ];
      ret = {
        found: false,
        config: null
      };
      for (i$ = 0, len$ = pathes.length; i$ < len$; ++i$) {
        p = pathes[i$];
        if (ret.found) {
          continue;
        }
        try {
          DBG("try " + p.path + " ...");
          text = fs.readFileSync(p.path) + "";
          if (!p.json) {
            text = require('livescript').compile(text, {
              json: true
            });
          }
          ret.config = JSON.parse(text);
          ret.found = true;
        } catch (e$) {
          error = e$;
          console.log("stack: " + error.stack);
          continue;
        }
      }
      if (!ret.found) {
        DBG("cannot find config " + name);
      }
      return ret.config;
    }
    /**
     * Resolve to an absolute path to the file in the specified
     * `type` directory, related to work_dir.
     *
     * @param type, the type of directory, e.g. 'logs', 'scripts', ...
     * @param filename, the name of that file.
     */,
    resolveWorkPath: function(type, filename){
      return path.resolve(settings.work_dir + "" + path.sep + type + path.sep + filename);
    }
    /**
     * Resolve to an absolute path to the file in the specified
     * `type` directory, related to app_dir.
     *
     * @param type, the type of directory, e.g. 'logs', 'scripts', ...
     * @param filename, the name of that file.
     */,
    resolveResourcePath: function(type, filename){
      var ret;
      ret = path.resolve(settings.app_dir + "" + path.sep + type + path.sep + filename);
      return ret;
    }
    /**
     * Load javascript, livescript, or coffeescript from ${app_dir}/lib. For example,
     * when `loadScript 'foo'` is called, the function tries to load scripts one-by-one
     * as following order:
     *
     *    1. ${app_dir}/lib/foo.js
     *    2. ${app_dir}/lib/foo.ls
     *
     * @name {[type]}
     */,
    loadScript: function(name){
      return require(settings.app_dir + "" + path.sep + "lib" + path.sep + name);
    }
    /**
     * Load javascript, livescript, or coffeescript from ${app_dir}/lib/plugins. For example,
     * when `loadPlugin 'foo'` is called, the function tries to load scripts one-by-one
     * as following order:
     *
     *    1. ${app_dir}/lib/plugins/foo.js
     *    2. ${app_dir}/lib/plugins/foo.ls
     *    3. ${app_dir}/lib/plugins/foo/index.js
     *    4. ${app_dir}/lib/plugins/foo/index.ls
     *    5. ${esys_modules}/base/lib/plugins/foo.js
     *    6. ${esys_modules}/base/lib/plugins/foo.ls
     *    7. ${esys_modules}/base/lib/plugins/foo/index.js
     *    8. ${esys_modules}/base/lib/plugins/foo/index.ls
     *
     * @name {[type]}
     */,
    loadPlugin: function(name){
      var lib, plugins, errors, pathes, found, m, i$, len$, exx;
      lib = 'lib';
      plugins = 'plugins';
      errors = [];
      pathes = [settings.app_dir + "" + path.sep + lib + path.sep + plugins + path.sep + name, settings.app_dir + "" + path.sep + lib + path.sep + plugins + path.sep + name + path.sep + "index", __dirname + "" + path.sep + plugins + path.sep + name, __dirname + "" + path.sep + plugins + path.sep + name + path.sep + "index"];
      found = false;
      m = null;
      for (i$ = 0, len$ = pathes.length; i$ < len$; ++i$) {
        (fn$.call(this, i$, pathes[i$]));
      }
      if (found) {
        return m;
      }
      for (i$ = 0, len$ = errors.length; i$ < len$; ++i$) {
        (fn1$.call(this, i$, errors[i$]));
      }
      exx = errors.pop();
      throw exx.err;
      function fn$(i, p){
        var error, exx;
        if (!found) {
          try {
            m = require(p);
            found = true;
          } catch (e$) {
            error = e$;
            exx = {
              err: error,
              path: p
            };
            errors.push(exx);
          }
        }
      }
      function fn1$(i, exx){
        DBG("loading " + exx.path + " but err: " + exx.err);
      }
    }
    /**
     * Get the program name of entry javascript (livescript) for
     * nodejs to execute.
     */,
    getProgramName: function(){
      return settings.program_name;
    },
    getAppDir: function(){
      return settings.app_dir;
    },
    getWorkDir: function(){
      return settings.work_dir;
    }
  };
  module.exports = exports = resource;
}).call(this);

}).call(this,"/Users/yagamy/Work/workspaces/t2t/sandbox/externals/testbox/sensor-web-exp1/modules/yapps/lib")

},{"async":"async","fs":undefined,"livescript":"livescript","path":undefined}],10:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var moment, DBG, timerCbCurrying, exports, Timer;
  moment = require('moment');
  DBG = function(){
    if (global.logger != null) {
      return global.logger.debug.apply(global.logger, arguments);
    } else {
      return console.log.apply(console.log, arguments);
    }
  };
  /**
   * Simple Usage for Timer class
  
      t = new Timer 10s, obj, func
      t = new Timer 10s, obj, func, args
      t = new Timer 10s, func
      t = new Timer 10s, func, args
  
      t.start!
      t.configure 5s
  
      t.stop!
      t.cleanup!
   *
   */
  timerCbCurrying = curry$(function(timer, dummy){
    return timer.check();
  });
  module.exports = exports = Timer = (function(){
    Timer.displayName = 'Timer';
    var prototype = Timer.prototype, constructor = Timer;
    function Timer(period, x, y, z){
      var type;
      this.period = period;
      DBG("initiate timer w/ period = " + period);
      this.args = [];
      this.obj = null;
      this.interval_obj = null;
      this.last_invocation = null;
      this.callback = timerCbCurrying(this);
      type = typeof x;
      if ("function" === type) {
        this.type = "contextless";
        this.func = x;
        if (y != null && "array" === typeof y) {
          this.args = y;
        }
      } else if ("object" === typeof x && "string" === typeof y) {
        this.type = "context";
        this.obj = x;
        this.func = x[y];
        if (z != null && "array" === typeof z) {
          this.args = z;
        }
        if (this.func == null) {
          throw new Error("function " + y + " not found");
        }
      } else {
        throw new Error("invalid arguments for timer creation");
      }
      this.running = false;
      this.interval_obj = setInterval(this.callback, 500);
      this.last_invocation = moment();
    }
    prototype.start = function(){
      return this.running = true;
    };
    prototype.stop = function(){
      return this.running = false;
    };
    prototype.cleanup = function(){
      this.running = false;
      return clearInterval(this.interval_obj);
    };
    prototype.configure = function(period){
      this.period = period;
    };
    prototype.getPeriod = function(){
      return this.period;
    };
    prototype.check = function(){
      var now;
      if (!this.running) {
        return;
      }
      now = moment();
      now.subtract(this.period, 'seconds');
      if (now > this.last_invocation) {
        this.func.apply(this.obj, this.args);
        return this.last_invocation = moment();
      }
    };
    return Timer;
  }());
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);

},{"moment":"moment"}],11:[function(require,module,exports){
// Generated by LiveScript 1.4.0
(function(){
  var mkdirp, async, util, exports;
  mkdirp = require('mkdirp');
  async = require('async');
  util = {
    createDirectories: function(dirs, callback){
      var funcs, createCurrying, i$, len$;
      funcs = [];
      createCurrying = curry$(function(dir, cb){
        DBG("creating " + dir + " ...");
        return mkdirp(dir, function(err){
          return cb(err);
        });
      });
      for (i$ = 0, len$ = dirs.length; i$ < len$; ++i$) {
        (fn$.call(this, i$, dirs[i$]));
      }
      return async.series(funcs, function(err, results){
        return callback(err);
      });
      function fn$(i, dir){
        var c;
        c = createCurrying(dir);
        funcs.push(c);
      }
    },
    copyObject: function(dst, src, fields){
      var i$, len$;
      for (i$ = 0, len$ = fields.length; i$ < len$; ++i$) {
        (fn$.call(this, i$, fields[i$]));
      }
      return dst;
      function fn$(i, f){
        if (src[f] != null) {
          dst[f] = src[f];
        }
      }
    }
  };
  module.exports = exports = util;
  function curry$(f, bound){
    var context,
    _curry = function(args) {
      return f.length > 1 ? function(){
        var params = args ? args.concat() : [];
        context = bound ? context || this : this;
        return params.push.apply(params, arguments) <
            f.length && arguments.length ?
          _curry.call(context, params) : f.apply(context, params);
      } : f;
    };
    return _curry();
  }
}).call(this);

},{"async":"async","mkdirp":"mkdirp"}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
