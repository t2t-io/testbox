#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
import psutil
import sys
import signal
from threading import Thread
from queue import Queue
from time import sleep

# Helper classes and functions
#
from sensor_util import SensorData
from ps_sensors import AllPsSensorClasses

workers = []

def signal_handler(signal, frame):
    global workers
    print("")
    print("You pressed Ctrl + C, force all running threads to exit")
    for w in workers:
        w.stop()
    print("All threads are shutdown gracefully...")


class SensorWorker(Thread):
    def __init__(self, sensor, output_queue):
        super().__init__()
        self._sensor = sensor
        self._output = output_queue
        self._continue = True

    def stop(self):
        self._continue = False

    def perform(self):
        try:
            self._output.put(self._sensor.data)
        except Exception as e:
            pass

    def run(self):
        t = self._sensor.preferred_period
        x = int(t / 10)
        gap = 1 if x <= 0 else x
        gap = 3 if gap > 3 else gap
        x = t
        while self._continue:
            if x >= t:
                self.perform()
                x = 0
            else:
                sleep(gap)
                x = x + gap


class ConsoleConsumer(Thread):
    def __init__(self, std, data_queue, serializer):
        super().__init__()
        self._serializer = serializer
        self._data_queue = data_queue
        self._std = std
        self._continue = True
        self._end_obj = object()

    def stop(self):
        self._continue = False
        self._data_queue.put(self._end_obj)

    def run(self):
        while self._continue:
            data_list = self._data_queue.get()
            if data_list == self._end_obj:
                break
            for x in data_list:
                self._std.write(self._serializer(x))


def main():
    # Register SIG-INT and C-c events
    signal.signal(signal.SIGINT, signal_handler)

    def sensor_web_csv_serializer(sensor_data):
        return "DAT: %s\n" % (sensor_data.to_line('\t'))

    def debug_serializer(sensor_data):
        s = sensor_data
        return "%s/%s/%s/%s\t%s%s\n" % (
            s.board_type, s.board_id, s.sensor, s.data_type,
            s.value, "" if s.unit_length is None else s.unit_length
            )

    q = Queue()

    # Producers
    for c in AllPsSensorClasses:
        s = c()
        w = SensorWorker(s, q)
        w.start()
        workers.append(w)

    # Consumer
    w = ConsoleConsumer(sys.stdout, q, sensor_web_csv_serializer)
    # w = ConsoleConsumer(sys.stdout, q, debug_serializer)
    w.start()
    workers.append(w)

    for w in workers:
        w.join()

    sys.exit(0)


# Entry point
#
if __name__ == '__main__':
    main()
