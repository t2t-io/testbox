var window = {};
(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.entry = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
;(function (exports) {
  'use strict'

  var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

  var PLUS = '+'.charCodeAt(0)
  var SLASH = '/'.charCodeAt(0)
  var NUMBER = '0'.charCodeAt(0)
  var LOWER = 'a'.charCodeAt(0)
  var UPPER = 'A'.charCodeAt(0)
  var PLUS_URL_SAFE = '-'.charCodeAt(0)
  var SLASH_URL_SAFE = '_'.charCodeAt(0)

  function decode (elt) {
    var code = elt.charCodeAt(0)
    if (code === PLUS || code === PLUS_URL_SAFE) return 62 // '+'
    if (code === SLASH || code === SLASH_URL_SAFE) return 63 // '/'
    if (code < NUMBER) return -1 // no match
    if (code < NUMBER + 10) return code - NUMBER + 26 + 26
    if (code < UPPER + 26) return code - UPPER
    if (code < LOWER + 26) return code - LOWER + 26
  }

  function b64ToByteArray (b64) {
    var i, j, l, tmp, placeHolders, arr

    if (b64.length % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    var len = b64.length
    placeHolders = b64.charAt(len - 2) === '=' ? 2 : b64.charAt(len - 1) === '=' ? 1 : 0

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(b64.length * 3 / 4 - placeHolders)

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? b64.length - 4 : b64.length

    var L = 0

    function push (v) {
      arr[L++] = v
    }

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
      push((tmp & 0xFF0000) >> 16)
      push((tmp & 0xFF00) >> 8)
      push(tmp & 0xFF)
    }

    if (placeHolders === 2) {
      tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
      push(tmp & 0xFF)
    } else if (placeHolders === 1) {
      tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
      push((tmp >> 8) & 0xFF)
      push(tmp & 0xFF)
    }

    return arr
  }

  function uint8ToBase64 (uint8) {
    var i
    var extraBytes = uint8.length % 3 // if we have 1 byte left, pad 2 bytes
    var output = ''
    var temp, length

    function encode (num) {
      return lookup.charAt(num)
    }

    function tripletToBase64 (num) {
      return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
    }

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
      temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
      output += tripletToBase64(temp)
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    switch (extraBytes) {
      case 1:
        temp = uint8[uint8.length - 1]
        output += encode(temp >> 2)
        output += encode((temp << 4) & 0x3F)
        output += '=='
        break
      case 2:
        temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
        output += encode(temp >> 10)
        output += encode((temp >> 4) & 0x3F)
        output += encode((temp << 2) & 0x3F)
        output += '='
        break
      default:
        break
    }

    return output
  }

  exports.toByteArray = b64ToByteArray
  exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],2:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var apply, curry, flip, fix, over, memoize, slice$ = [].slice, toString$ = {}.toString;
apply = curry$(function(f, list){
  return f.apply(null, list);
});
curry = function(f){
  return curry$(f);
};
flip = curry$(function(f, x, y){
  return f(y, x);
});
fix = function(f){
  return function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  }(function(g){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  });
};
over = curry$(function(f, g, x, y){
  return f(g(x), g(y));
});
memoize = function(f){
  var memo;
  memo = {};
  return function(){
    var args, key, arg;
    args = slice$.call(arguments);
    key = (function(){
      var i$, ref$, len$, results$ = [];
      for (i$ = 0, len$ = (ref$ = args).length; i$ < len$; ++i$) {
        arg = ref$[i$];
        results$.push(arg + toString$.call(arg).slice(8, -1));
      }
      return results$;
    }()).join('');
    return memo[key] = key in memo
      ? memo[key]
      : f.apply(null, args);
  };
};
module.exports = {
  curry: curry,
  flip: flip,
  fix: fix,
  apply: apply,
  over: over,
  memoize: memoize
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],3:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var each, map, compact, filter, reject, partition, find, head, first, tail, last, initial, empty, reverse, unique, uniqueBy, fold, foldl, fold1, foldl1, foldr, foldr1, unfoldr, concat, concatMap, flatten, difference, intersection, union, countBy, groupBy, andList, orList, any, all, sort, sortWith, sortBy, sum, product, mean, average, maximum, minimum, maximumBy, minimumBy, scan, scanl, scan1, scanl1, scanr, scanr1, slice, take, drop, splitAt, takeWhile, dropWhile, span, breakList, zip, zipWith, zipAll, zipAllWith, at, elemIndex, elemIndices, findIndex, findIndices, toString$ = {}.toString, slice$ = [].slice;
each = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    f(x);
  }
  return xs;
});
map = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    results$.push(f(x));
  }
  return results$;
});
compact = function(xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      results$.push(x);
    }
  }
  return results$;
};
filter = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
reject = curry$(function(f, xs){
  var i$, len$, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
partition = curry$(function(f, xs){
  var passed, failed, i$, len$, x;
  passed = [];
  failed = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    (f(x) ? passed : failed).push(x);
  }
  return [passed, failed];
});
find = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return x;
    }
  }
});
head = first = function(xs){
  return xs[0];
};
tail = function(xs){
  if (!xs.length) {
    return;
  }
  return xs.slice(1);
};
last = function(xs){
  return xs[xs.length - 1];
};
initial = function(xs){
  if (!xs.length) {
    return;
  }
  return xs.slice(0, -1);
};
empty = function(xs){
  return !xs.length;
};
reverse = function(xs){
  return xs.concat().reverse();
};
unique = function(xs){
  var result, i$, len$, x;
  result = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!in$(x, result)) {
      result.push(x);
    }
  }
  return result;
};
uniqueBy = curry$(function(f, xs){
  var seen, i$, len$, x, val, results$ = [];
  seen = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    val = f(x);
    if (in$(val, seen)) {
      continue;
    }
    seen.push(val);
    results$.push(x);
  }
  return results$;
});
fold = foldl = curry$(function(f, memo, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    memo = f(memo, x);
  }
  return memo;
});
fold1 = foldl1 = curry$(function(f, xs){
  return fold(f, xs[0], xs.slice(1));
});
foldr = curry$(function(f, memo, xs){
  var i$, x;
  for (i$ = xs.length - 1; i$ >= 0; --i$) {
    x = xs[i$];
    memo = f(x, memo);
  }
  return memo;
});
foldr1 = curry$(function(f, xs){
  return foldr(f, xs[xs.length - 1], xs.slice(0, -1));
});
unfoldr = curry$(function(f, b){
  var result, x, that;
  result = [];
  x = b;
  while ((that = f(x)) != null) {
    result.push(that[0]);
    x = that[1];
  }
  return result;
});
concat = function(xss){
  return [].concat.apply([], xss);
};
concatMap = curry$(function(f, xs){
  var x;
  return [].concat.apply([], (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(f(x));
    }
    return results$;
  }()));
});
flatten = function(xs){
  var x;
  return [].concat.apply([], (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      if (toString$.call(x).slice(8, -1) === 'Array') {
        results$.push(flatten(x));
      } else {
        results$.push(x);
      }
    }
    return results$;
  }()));
};
difference = function(xs){
  var yss, results, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (in$(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
intersection = function(xs){
  var yss, results, i$, len$, x, j$, len1$, ys;
  yss = slice$.call(arguments, 1);
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (!in$(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
union = function(){
  var xss, results, i$, len$, xs, j$, len1$, x;
  xss = slice$.call(arguments);
  results = [];
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) {
      x = xs[j$];
      if (!in$(x, results)) {
        results.push(x);
      }
    }
  }
  return results;
};
countBy = curry$(function(f, xs){
  var results, i$, len$, x, key;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key] += 1;
    } else {
      results[key] = 1;
    }
  }
  return results;
});
groupBy = curry$(function(f, xs){
  var results, i$, len$, x, key;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key].push(x);
    } else {
      results[key] = [x];
    }
  }
  return results;
});
andList = function(xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!x) {
      return false;
    }
  }
  return true;
};
orList = function(xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      return true;
    }
  }
  return false;
};
any = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return true;
    }
  }
  return false;
});
all = curry$(function(f, xs){
  var i$, len$, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      return false;
    }
  }
  return true;
});
sort = function(xs){
  return xs.concat().sort(function(x, y){
    if (x > y) {
      return 1;
    } else if (x < y) {
      return -1;
    } else {
      return 0;
    }
  });
};
sortWith = curry$(function(f, xs){
  return xs.concat().sort(f);
});
sortBy = curry$(function(f, xs){
  return xs.concat().sort(function(x, y){
    if (f(x) > f(y)) {
      return 1;
    } else if (f(x) < f(y)) {
      return -1;
    } else {
      return 0;
    }
  });
});
sum = function(xs){
  var result, i$, len$, x;
  result = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result += x;
  }
  return result;
};
product = function(xs){
  var result, i$, len$, x;
  result = 1;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result *= x;
  }
  return result;
};
mean = average = function(xs){
  var sum, i$, len$, x;
  sum = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    sum += x;
  }
  return sum / xs.length;
};
maximum = function(xs){
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x > max) {
      max = x;
    }
  }
  return max;
};
minimum = function(xs){
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x < min) {
      min = x;
    }
  }
  return min;
};
maximumBy = curry$(function(f, xs){
  var max, i$, ref$, len$, x;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) > f(max)) {
      max = x;
    }
  }
  return max;
});
minimumBy = curry$(function(f, xs){
  var min, i$, ref$, len$, x;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) < f(min)) {
      min = x;
    }
  }
  return min;
});
scan = scanl = curry$(function(f, memo, xs){
  var last, x;
  last = memo;
  return [memo].concat((function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(last = f(last, x));
    }
    return results$;
  }()));
});
scan1 = scanl1 = curry$(function(f, xs){
  if (!xs.length) {
    return;
  }
  return scan(f, xs[0], xs.slice(1));
});
scanr = curry$(function(f, memo, xs){
  xs = xs.concat().reverse();
  return scan(f, memo, xs).reverse();
});
scanr1 = curry$(function(f, xs){
  if (!xs.length) {
    return;
  }
  xs = xs.concat().reverse();
  return scan(f, xs[0], xs.slice(1)).reverse();
});
slice = curry$(function(x, y, xs){
  return xs.slice(x, y);
});
take = curry$(function(n, xs){
  if (n <= 0) {
    return xs.slice(0, 0);
  } else {
    return xs.slice(0, n);
  }
});
drop = curry$(function(n, xs){
  if (n <= 0) {
    return xs;
  } else {
    return xs.slice(n);
  }
});
splitAt = curry$(function(n, xs){
  return [take(n, xs), drop(n, xs)];
});
takeWhile = curry$(function(p, xs){
  var len, i;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(0, i);
});
dropWhile = curry$(function(p, xs){
  var len, i;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(i);
});
span = curry$(function(p, xs){
  return [takeWhile(p, xs), dropWhile(p, xs)];
});
breakList = curry$(function(p, xs){
  return span(compose$(p, not$), xs);
});
zip = curry$(function(xs, ys){
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push([x, ys[i]]);
  }
  return result;
});
zipWith = curry$(function(f, xs, ys){
  var result, len, i$, len$, i, x;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push(f(x, ys[i]));
  }
  return result;
});
zipAll = function(){
  var xss, minLength, i$, len$, xs, ref$, i, lresult$, j$, results$ = [];
  xss = slice$.call(arguments);
  minLength = undefined;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    lresult$ = [];
    for (j$ = 0, len$ = xss.length; j$ < len$; ++j$) {
      xs = xss[j$];
      lresult$.push(xs[i]);
    }
    results$.push(lresult$);
  }
  return results$;
};
zipAllWith = function(f){
  var xss, minLength, i$, len$, xs, ref$, i, results$ = [];
  xss = slice$.call(arguments, 1);
  minLength = undefined;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    results$.push(f.apply(null, (fn$())));
  }
  return results$;
  function fn$(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xss).length; i$ < len$; ++i$) {
      xs = ref$[i$];
      results$.push(xs[i]);
    }
    return results$;
  }
};
at = curry$(function(n, xs){
  if (n < 0) {
    return xs[xs.length + n];
  } else {
    return xs[n];
  }
});
elemIndex = curry$(function(el, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      return i;
    }
  }
});
elemIndices = curry$(function(el, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      results$.push(i);
    }
  }
  return results$;
});
findIndex = curry$(function(f, xs){
  var i$, len$, i, x;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      return i;
    }
  }
});
findIndices = curry$(function(f, xs){
  var i$, len$, i, x, results$ = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      results$.push(i);
    }
  }
  return results$;
});
module.exports = {
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find,
  head: head,
  first: first,
  tail: tail,
  last: last,
  initial: initial,
  empty: empty,
  reverse: reverse,
  difference: difference,
  intersection: intersection,
  union: union,
  countBy: countBy,
  groupBy: groupBy,
  fold: fold,
  fold1: fold1,
  foldl: foldl,
  foldl1: foldl1,
  foldr: foldr,
  foldr1: foldr1,
  unfoldr: unfoldr,
  andList: andList,
  orList: orList,
  any: any,
  all: all,
  unique: unique,
  uniqueBy: uniqueBy,
  sort: sort,
  sortWith: sortWith,
  sortBy: sortBy,
  sum: sum,
  product: product,
  mean: mean,
  average: average,
  concat: concat,
  concatMap: concatMap,
  flatten: flatten,
  maximum: maximum,
  minimum: minimum,
  maximumBy: maximumBy,
  minimumBy: minimumBy,
  scan: scan,
  scan1: scan1,
  scanl: scanl,
  scanl1: scanl1,
  scanr: scanr,
  scanr1: scanr1,
  slice: slice,
  take: take,
  drop: drop,
  splitAt: splitAt,
  takeWhile: takeWhile,
  dropWhile: dropWhile,
  span: span,
  breakList: breakList,
  zip: zip,
  zipWith: zipWith,
  zipAll: zipAll,
  zipAllWith: zipAllWith,
  at: at,
  elemIndex: elemIndex,
  elemIndices: elemIndices,
  findIndex: findIndex,
  findIndices: findIndices
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function in$(x, xs){
  var i = -1, l = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function compose$() {
  var functions = arguments;
  return function() {
    var i, result;
    result = functions[0].apply(this, arguments);
    for (i = 1; i < functions.length; ++i) {
      result = functions[i](result);
    }
    return result;
  };
}
function not$(x){ return !x; }
},{}],4:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var max, min, negate, abs, signum, quot, rem, div, mod, recip, pi, tau, exp, sqrt, ln, pow, sin, tan, cos, asin, acos, atan, atan2, truncate, round, ceiling, floor, isItNaN, even, odd, gcd, lcm;
max = curry$(function(x$, y$){
  return x$ > y$ ? x$ : y$;
});
min = curry$(function(x$, y$){
  return x$ < y$ ? x$ : y$;
});
negate = function(x){
  return -x;
};
abs = Math.abs;
signum = function(x){
  if (x < 0) {
    return -1;
  } else if (x > 0) {
    return 1;
  } else {
    return 0;
  }
};
quot = curry$(function(x, y){
  return ~~(x / y);
});
rem = curry$(function(x$, y$){
  return x$ % y$;
});
div = curry$(function(x, y){
  return Math.floor(x / y);
});
mod = curry$(function(x$, y$){
  var ref$;
  return (((x$) % (ref$ = y$) + ref$) % ref$);
});
recip = (function(it){
  return 1 / it;
});
pi = Math.PI;
tau = pi * 2;
exp = Math.exp;
sqrt = Math.sqrt;
ln = Math.log;
pow = curry$(function(x$, y$){
  return Math.pow(x$, y$);
});
sin = Math.sin;
tan = Math.tan;
cos = Math.cos;
asin = Math.asin;
acos = Math.acos;
atan = Math.atan;
atan2 = curry$(function(x, y){
  return Math.atan2(x, y);
});
truncate = function(x){
  return ~~x;
};
round = Math.round;
ceiling = Math.ceil;
floor = Math.floor;
isItNaN = function(x){
  return x !== x;
};
even = function(x){
  return x % 2 === 0;
};
odd = function(x){
  return x % 2 !== 0;
};
gcd = curry$(function(x, y){
  var z;
  x = Math.abs(x);
  y = Math.abs(y);
  while (y !== 0) {
    z = x % y;
    x = y;
    y = z;
  }
  return x;
});
lcm = curry$(function(x, y){
  return Math.abs(Math.floor(x / gcd(x, y) * y));
});
module.exports = {
  max: max,
  min: min,
  negate: negate,
  abs: abs,
  signum: signum,
  quot: quot,
  rem: rem,
  div: div,
  mod: mod,
  recip: recip,
  pi: pi,
  tau: tau,
  exp: exp,
  sqrt: sqrt,
  ln: ln,
  pow: pow,
  sin: sin,
  tan: tan,
  cos: cos,
  acos: acos,
  asin: asin,
  atan: atan,
  atan2: atan2,
  truncate: truncate,
  round: round,
  ceiling: ceiling,
  floor: floor,
  isItNaN: isItNaN,
  even: even,
  odd: odd,
  gcd: gcd,
  lcm: lcm
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],5:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var values, keys, pairsToObj, objToPairs, listsToObj, objToLists, empty, each, map, compact, filter, reject, partition, find;
values = function(object){
  var i$, x, results$ = [];
  for (i$ in object) {
    x = object[i$];
    results$.push(x);
  }
  return results$;
};
keys = function(object){
  var x, results$ = [];
  for (x in object) {
    results$.push(x);
  }
  return results$;
};
pairsToObj = function(object){
  var i$, len$, x, resultObj$ = {};
  for (i$ = 0, len$ = object.length; i$ < len$; ++i$) {
    x = object[i$];
    resultObj$[x[0]] = x[1];
  }
  return resultObj$;
};
objToPairs = function(object){
  var key, value, results$ = [];
  for (key in object) {
    value = object[key];
    results$.push([key, value]);
  }
  return results$;
};
listsToObj = curry$(function(keys, values){
  var i$, len$, i, key, resultObj$ = {};
  for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
    i = i$;
    key = keys[i$];
    resultObj$[key] = values[i];
  }
  return resultObj$;
});
objToLists = function(object){
  var keys, values, key, value;
  keys = [];
  values = [];
  for (key in object) {
    value = object[key];
    keys.push(key);
    values.push(value);
  }
  return [keys, values];
};
empty = function(object){
  var x;
  for (x in object) {
    return false;
  }
  return true;
};
each = curry$(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    f(x);
  }
  return object;
});
map = curry$(function(f, object){
  var k, x, resultObj$ = {};
  for (k in object) {
    x = object[k];
    resultObj$[k] = f(x);
  }
  return resultObj$;
});
compact = function(object){
  var k, x, resultObj$ = {};
  for (k in object) {
    x = object[k];
    if (x) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
};
filter = curry$(function(f, object){
  var k, x, resultObj$ = {};
  for (k in object) {
    x = object[k];
    if (f(x)) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
});
reject = curry$(function(f, object){
  var k, x, resultObj$ = {};
  for (k in object) {
    x = object[k];
    if (!f(x)) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
});
partition = curry$(function(f, object){
  var passed, failed, k, x;
  passed = {};
  failed = {};
  for (k in object) {
    x = object[k];
    (f(x) ? passed : failed)[k] = x;
  }
  return [passed, failed];
});
find = curry$(function(f, object){
  var i$, x;
  for (i$ in object) {
    x = object[i$];
    if (f(x)) {
      return x;
    }
  }
});
module.exports = {
  values: values,
  keys: keys,
  pairsToObj: pairsToObj,
  objToPairs: objToPairs,
  listsToObj: listsToObj,
  objToLists: objToLists,
  empty: empty,
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],6:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var split, join, lines, unlines, words, unwords, chars, unchars, reverse, repeat, capitalize, camelize, dasherize;
split = curry$(function(sep, str){
  return str.split(sep);
});
join = curry$(function(sep, xs){
  return xs.join(sep);
});
lines = function(str){
  if (!str.length) {
    return [];
  }
  return str.split('\n');
};
unlines = function(it){
  return it.join('\n');
};
words = function(str){
  if (!str.length) {
    return [];
  }
  return str.split(/[ ]+/);
};
unwords = function(it){
  return it.join(' ');
};
chars = function(it){
  return it.split('');
};
unchars = function(it){
  return it.join('');
};
reverse = function(str){
  return str.split('').reverse().join('');
};
repeat = curry$(function(n, str){
  var result, i$;
  result = '';
  for (i$ = 0; i$ < n; ++i$) {
    result += str;
  }
  return result;
});
capitalize = function(str){
  return str.charAt(0).toUpperCase() + str.slice(1);
};
camelize = function(it){
  return it.replace(/[-_]+(.)?/g, function(arg$, c){
    return (c != null ? c : '').toUpperCase();
  });
};
dasherize = function(str){
  return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$, lower, upper){
    return lower + "-" + (upper.length > 1
      ? upper
      : upper.toLowerCase());
  }).replace(/^([A-Z]+)/, function(arg$, upper){
    if (upper.length > 1) {
      return upper + "-";
    } else {
      return upper.toLowerCase();
    }
  });
};
module.exports = {
  split: split,
  join: join,
  lines: lines,
  unlines: unlines,
  words: words,
  unwords: unwords,
  chars: chars,
  unchars: unchars,
  reverse: reverse,
  repeat: repeat,
  capitalize: capitalize,
  camelize: camelize,
  dasherize: dasherize
};
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],7:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var Func, List, Obj, Str, Num, id, isType, replicate, prelude, toString$ = {}.toString;
Func = require('./Func.js');
List = require('./List.js');
Obj = require('./Obj.js');
Str = require('./Str.js');
Num = require('./Num.js');
id = function(x){
  return x;
};
isType = curry$(function(type, x){
  return toString$.call(x).slice(8, -1) === type;
});
replicate = curry$(function(n, x){
  var i$, results$ = [];
  for (i$ = 0; i$ < n; ++i$) {
    results$.push(x);
  }
  return results$;
});
Str.empty = List.empty;
Str.slice = List.slice;
Str.take = List.take;
Str.drop = List.drop;
Str.splitAt = List.splitAt;
Str.takeWhile = List.takeWhile;
Str.dropWhile = List.dropWhile;
Str.span = List.span;
Str.breakStr = List.breakList;
prelude = {
  Func: Func,
  List: List,
  Obj: Obj,
  Str: Str,
  Num: Num,
  id: id,
  isType: isType,
  replicate: replicate
};
prelude.each = List.each;
prelude.map = List.map;
prelude.filter = List.filter;
prelude.compact = List.compact;
prelude.reject = List.reject;
prelude.partition = List.partition;
prelude.find = List.find;
prelude.head = List.head;
prelude.first = List.first;
prelude.tail = List.tail;
prelude.last = List.last;
prelude.initial = List.initial;
prelude.empty = List.empty;
prelude.reverse = List.reverse;
prelude.difference = List.difference;
prelude.intersection = List.intersection;
prelude.union = List.union;
prelude.countBy = List.countBy;
prelude.groupBy = List.groupBy;
prelude.fold = List.fold;
prelude.foldl = List.foldl;
prelude.fold1 = List.fold1;
prelude.foldl1 = List.foldl1;
prelude.foldr = List.foldr;
prelude.foldr1 = List.foldr1;
prelude.unfoldr = List.unfoldr;
prelude.andList = List.andList;
prelude.orList = List.orList;
prelude.any = List.any;
prelude.all = List.all;
prelude.unique = List.unique;
prelude.uniqueBy = List.uniqueBy;
prelude.sort = List.sort;
prelude.sortWith = List.sortWith;
prelude.sortBy = List.sortBy;
prelude.sum = List.sum;
prelude.product = List.product;
prelude.mean = List.mean;
prelude.average = List.average;
prelude.concat = List.concat;
prelude.concatMap = List.concatMap;
prelude.flatten = List.flatten;
prelude.maximum = List.maximum;
prelude.minimum = List.minimum;
prelude.maximumBy = List.maximumBy;
prelude.minimumBy = List.minimumBy;
prelude.scan = List.scan;
prelude.scanl = List.scanl;
prelude.scan1 = List.scan1;
prelude.scanl1 = List.scanl1;
prelude.scanr = List.scanr;
prelude.scanr1 = List.scanr1;
prelude.slice = List.slice;
prelude.take = List.take;
prelude.drop = List.drop;
prelude.splitAt = List.splitAt;
prelude.takeWhile = List.takeWhile;
prelude.dropWhile = List.dropWhile;
prelude.span = List.span;
prelude.breakList = List.breakList;
prelude.zip = List.zip;
prelude.zipWith = List.zipWith;
prelude.zipAll = List.zipAll;
prelude.zipAllWith = List.zipAllWith;
prelude.at = List.at;
prelude.elemIndex = List.elemIndex;
prelude.elemIndices = List.elemIndices;
prelude.findIndex = List.findIndex;
prelude.findIndices = List.findIndices;
prelude.apply = Func.apply;
prelude.curry = Func.curry;
prelude.flip = Func.flip;
prelude.fix = Func.fix;
prelude.over = Func.over;
prelude.split = Str.split;
prelude.join = Str.join;
prelude.lines = Str.lines;
prelude.unlines = Str.unlines;
prelude.words = Str.words;
prelude.unwords = Str.unwords;
prelude.chars = Str.chars;
prelude.unchars = Str.unchars;
prelude.repeat = Str.repeat;
prelude.capitalize = Str.capitalize;
prelude.camelize = Str.camelize;
prelude.dasherize = Str.dasherize;
prelude.values = Obj.values;
prelude.keys = Obj.keys;
prelude.pairsToObj = Obj.pairsToObj;
prelude.objToPairs = Obj.objToPairs;
prelude.listsToObj = Obj.listsToObj;
prelude.objToLists = Obj.objToLists;
prelude.max = Num.max;
prelude.min = Num.min;
prelude.negate = Num.negate;
prelude.abs = Num.abs;
prelude.signum = Num.signum;
prelude.quot = Num.quot;
prelude.rem = Num.rem;
prelude.div = Num.div;
prelude.mod = Num.mod;
prelude.recip = Num.recip;
prelude.pi = Num.pi;
prelude.tau = Num.tau;
prelude.exp = Num.exp;
prelude.sqrt = Num.sqrt;
prelude.ln = Num.ln;
prelude.pow = Num.pow;
prelude.sin = Num.sin;
prelude.tan = Num.tan;
prelude.cos = Num.cos;
prelude.acos = Num.acos;
prelude.asin = Num.asin;
prelude.atan = Num.atan;
prelude.atan2 = Num.atan2;
prelude.truncate = Num.truncate;
prelude.round = Num.round;
prelude.ceiling = Num.ceiling;
prelude.floor = Num.floor;
prelude.isItNaN = Num.isItNaN;
prelude.even = Num.even;
prelude.odd = Num.odd;
prelude.gcd = Num.gcd;
prelude.lcm = Num.lcm;
prelude.VERSION = '1.1.2';
module.exports = prelude;
function curry$(f, bound){
  var context,
  _curry = function(args) {
    return f.length > 1 ? function(){
      var params = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{"./Func.js":2,"./List.js":3,"./Num.js":4,"./Obj.js":5,"./Str.js":6}],8:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, sum, map, chars, logger, DBG, b64, LABEST_LE_007_PREFIX, LINE_SEPARATOR, encodeLabest007RawPacket, encodeLabest007Packet, base64Encode, Encoder, MAX_BUFFER_SIZE, Decoder, exports;
ref$ = require('prelude-ls'), sum = ref$.sum, map = ref$.map, chars = ref$.chars;
logger = require('./platform').logger;
DBG = logger.DBG;
b64 = require('base64-js');
LABEST_LE_007_PREFIX = 0x55;
LINE_SEPARATOR = '\n'.charCodeAt(0);
encodeLabest007RawPacket = function(u8Array){
  var output;
  if (u8Array.length > 17) {
    return ["input shall be less than 17 bytes", null];
  }
  if (u8Array == null) {
    u8Array = new Uint8Array([]);
  }
  output = new Uint8Array(3 + u8Array.length);
  output[0] = LABEST_LE_007_PREFIX;
  output[1] = u8Array.length;
  output.set(u8Array, 2);
  output[2 + u8Array.length] = sum(output);
  return [null, output];
};
encodeLabest007Packet = function(bytes){
  var output;
  if (bytes.length > 16) {
    return ["input shall be less than 16 bytes", null];
  }
  if (bytes == null) {
    bytes = new Uint8Array([]);
  }
  output = new Uint8Array(17);
  output.set(bytes, 0);
  output[16] = LINE_SEPARATOR + 0x100 - (LABEST_LE_007_PREFIX + output.length + sum(bytes) & 0xFF);
  return encodeLabest007RawPacket(output);
};
base64Encode = function(bytes){
  var str, xs, a;
  str = b64.fromByteArray(bytes);
  xs = chars(
  str);
  return (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      a = ref$[i$];
      results$.push(a.charCodeAt(0));
    }
    return results$;
  }());
};
Encoder = (function(){
  Encoder.displayName = 'Encoder';
  var prototype = Encoder.prototype, constructor = Encoder;
  function Encoder(){
    this.base64 = true;
    return;
  }
  prototype.setEncoding = function(base64){
    this.base64 = base64;
  };
  prototype.maxBytes = function(){
    return this.base64 ? 12 : 16;
  };
  prototype.encode = function(bytes){
    if (this.base64) {
      return encodeLabest007Packet(base64Encode(bytes));
    }
    return encodeLabest007Packet(bytes);
  };
  return Encoder;
}());
MAX_BUFFER_SIZE = 1024;
Decoder = (function(){
  Decoder.displayName = 'Decoder';
  var prototype = Decoder.prototype, constructor = Decoder;
  function Decoder(){
    this.buffer = new Uint8Array(MAX_BUFFER_SIZE);
    this.base64 = true;
    this.reset();
  }
  prototype.reset = function(){
    this.buffer = new Uint8Array(MAX_BUFFER_SIZE);
    return this.offset = 0;
  };
  prototype.setEncoding = function(base64){
    this.base64 = base64;
  };
  prototype.nextPacket = function(bytes){
    var offset, count, res$, i$, to$, i, b;
    if (bytes.length !== 20) {
      return DBG("[next-packet] error, expects 20 bytes but only " + bytes.length);
    }
    if (bytes[0] !== LABEST_LE_007_PREFIX) {
      return DBG("[next-packet] expect 0x55 at 1st byte but 0x" + bytes[0].toString(16));
    }
    if (bytes[1] !== 17) {
      return DBG("[next-packet] expect 17 at 2nd byte but " + bytes[1]);
    }
    if (bytes[19] !== LINE_SEPARATOR) {
      return DBG("[next-packet] expect 0x0A at 20th byte but 0x" + bytes[19].toString(16));
    }
    offset = 2;
    count = 16;
    res$ = [];
    for (i$ = offset, to$ = offset + count - 1; i$ <= to$; ++i$) {
      i = i$;
      res$.push(bytes[i]);
    }
    bytes = res$;
    if (this.base64) {
      bytes = Array.prototype.slice.call(b64.toByteArray((function(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = bytes).length; i$ < len$; ++i$) {
          b = ref$[i$];
          results$.push(String.fromCharCode(b));
        }
        return results$;
      }()).join("")));
    }
    return this.packets.push(bytes);
  };
  prototype.nextByte = function(b){
    var offset, buffer, cb, count, bytes, res$, i$, to$, i;
    offset = this.offset, buffer = this.buffer, cb = this.cb;
    if (b === LINE_SEPARATOR) {
      buffer[offset] = b;
      count = offset + 1;
      res$ = [];
      for (i$ = 0, to$ = count - 1; i$ <= to$; ++i$) {
        i = i$;
        res$.push(buffer[i]);
      }
      bytes = res$;
      this.nextPacket(bytes);
      return this.reset();
    } else {
      buffer[offset] = b;
      return this.offset = offset + 1;
    }
  };
  prototype.nextBytes = function(bytes){
    var array, i$, len$, b, results$ = [];
    array = Array.prototype.slice.call(bytes);
    for (i$ = 0, len$ = array.length; i$ < len$; ++i$) {
      b = array[i$];
      results$.push(this.nextByte(b));
    }
    return results$;
  };
  prototype.resetPackets = function(){
    var p;
    p = this.packets;
    this.packets = [];
    return p;
  };
  return Decoder;
}());
module.exports = exports = {
  getEncoder: function(){
    return new Encoder();
  },
  getDecoder: function(){
    return new Decoder();
  }
};

},{"./platform":13,"base64-js":1,"prelude-ls":7}],9:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var CB1_PROTO_PROTOCOL_VERSION, CB1_PROTO_BASIC_BASE_BLANK, CB1_PROTO_BASIC_BASE_REQUEST_SYSTEM_INFO, CB1_PROTO_ACTUATOR_BASE_RESERVED, CB1_PROTO_ACTUATOR_BASE_LED_1, CB1_PROTO_ACTUATOR_BASE_LED_2, CB1_PROTO_ACTUATOR_BASE_LED_3, CB1_PROTO_ACTUATOR_BASE_LED_4, CB1_PROTO_ACTUATOR_BASE_LED_5, CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_1, CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_2, CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_3, CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_4, CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_5, CB1_PROTO_ACTUATOR_BASE_SHIELD1_SOUND_1, CB1_PROTO_MOTOR_BASE_SOCKET_RESERVED, CB1_PROTO_MOTOR_BASE_SOCKET_1, CB1_PROTO_MOTOR_BASE_SOCKET_2, CB1_PROTO_MOTOR_BASE_SOCKET_3, CB1_PROTO_MOTOR_BASE_SOCKET_4, CB1_PROTO_MOTOR_BASE_SOCKET_5, CB1_PROTO_MOTOR_BASE_SOCKET_6, CB1_PROTO_MOTOR_BASE_SOCKET_7, CB1_PROTO_MOTOR_BASE_SOCKET_8, CB1_PROTO_MOTOR_BASE_SOCKET_9, CB1_PROTO_MOTOR_BASE_SOCKET_10, CB1_PROTO_MOTOR_BASE_END, CB1_PROTO_XXX_BASE_SOCKET_RESERVED, CB1_PROTO_XXX_BASE_END, CB1_PROTO_SENSOR_BASE_RESERVED, CB1_PROTO_SENSOR_BASE_BATTERY_SENSOR, CB1_PROTO_SENSOR_BASE_DISTANCE_SENSOR, CB1_PROTO_SENSOR_BASE_ILLUMINANCE_SENSOR, CB1_PROTO_SENSOR_BASE_BUTTON_1, CB1_PROTO_SENSOR_BASE_BUTTON_2, CB1_PROTO_SENSOR_BASE_BUTTON_3, CB1_PROTO_SENSOR_BASE_BUTTON_4, CB1_PROTO_SENSOR_BASE_END, CB1_PROTO_SYSTEM_BASE_RESERVED, CB1_PROTO_SYSTEM_BASE_VERSION_NUMBER_MAJOR_MINOR, CB1_PROTO_SYSTEM_BASE_VERSION_NUMBER_PATCH_BUILD, CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_0, CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_1, CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_2, CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_3, CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_4, CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_5, CB1_PROTO_CONFIG_SET_BASE_RESERVED, CB1_PROTO_CONFIG_SET_BASE_ACTUATOR_TYPE, CB1_PROTO_CONFIG_SET_BASE_MOTOR_TYPE, CB1_PROTO_CONFIG_SET_BASE_SENSOR_ENABLED, CB1_PROTO_CONFIG_SET_BASE_SENSOR_OUTPUT_PRIORITY, CB1_PROTO_CONFIG_SET_BASE_TRANSMISSION_PRIORITY, CB1_PROTO_CONFIG_GET_BASE_RESERVED, CB1_PROTO_CONFIG_GET_BASE_ACTUATOR_TYPE, CB1_PROTO_CONFIG_GET_BASE_MOTOR_TYPE, CB1_PROTO_CONFIG_GET_BASE_SENSOR_ENABLED, CB1_PROTO_INVALID_SLOT_VALUE, DEFINITION_SLOTS, CODEC_SLOTS, METADATA_SLOTS, CONSTANT_NAMES, CONSTANTS, isValid, Agent, Engine, exports;
CB1_PROTO_PROTOCOL_VERSION = "1.0.0";
CB1_PROTO_BASIC_BASE_BLANK = 0x00;
CB1_PROTO_BASIC_BASE_REQUEST_SYSTEM_INFO = 0x01;
CB1_PROTO_ACTUATOR_BASE_RESERVED = 0x10;
CB1_PROTO_ACTUATOR_BASE_LED_1 = 0x11;
CB1_PROTO_ACTUATOR_BASE_LED_2 = 0x12;
CB1_PROTO_ACTUATOR_BASE_LED_3 = 0x13;
CB1_PROTO_ACTUATOR_BASE_LED_4 = 0x14;
CB1_PROTO_ACTUATOR_BASE_LED_5 = 0x15;
CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_1 = 0x16;
CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_2 = 0x17;
CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_3 = 0x18;
CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_4 = 0x19;
CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_5 = 0x1A;
CB1_PROTO_ACTUATOR_BASE_SHIELD1_SOUND_1 = 0x1B;
CB1_PROTO_MOTOR_BASE_SOCKET_RESERVED = 0x20;
CB1_PROTO_MOTOR_BASE_SOCKET_1 = 0x21;
CB1_PROTO_MOTOR_BASE_SOCKET_2 = 0x22;
CB1_PROTO_MOTOR_BASE_SOCKET_3 = 0x23;
CB1_PROTO_MOTOR_BASE_SOCKET_4 = 0x24;
CB1_PROTO_MOTOR_BASE_SOCKET_5 = 0x25;
CB1_PROTO_MOTOR_BASE_SOCKET_6 = 0x26;
CB1_PROTO_MOTOR_BASE_SOCKET_7 = 0x27;
CB1_PROTO_MOTOR_BASE_SOCKET_8 = 0x28;
CB1_PROTO_MOTOR_BASE_SOCKET_9 = 0x29;
CB1_PROTO_MOTOR_BASE_SOCKET_10 = 0x2A;
CB1_PROTO_MOTOR_BASE_END = 0x2F;
CB1_PROTO_XXX_BASE_SOCKET_RESERVED = 0x30;
CB1_PROTO_XXX_BASE_END = 0x3F;
CB1_PROTO_SENSOR_BASE_RESERVED = 0x40;
CB1_PROTO_SENSOR_BASE_BATTERY_SENSOR = 0x41;
CB1_PROTO_SENSOR_BASE_DISTANCE_SENSOR = 0x45;
CB1_PROTO_SENSOR_BASE_ILLUMINANCE_SENSOR = 0x46;
CB1_PROTO_SENSOR_BASE_BUTTON_1 = 0x4B;
CB1_PROTO_SENSOR_BASE_BUTTON_2 = 0x4C;
CB1_PROTO_SENSOR_BASE_BUTTON_3 = 0x4D;
CB1_PROTO_SENSOR_BASE_BUTTON_4 = 0x4E;
CB1_PROTO_SENSOR_BASE_END = 0x4F;
CB1_PROTO_SYSTEM_BASE_RESERVED = 0x50;
CB1_PROTO_SYSTEM_BASE_VERSION_NUMBER_MAJOR_MINOR = 0x51;
CB1_PROTO_SYSTEM_BASE_VERSION_NUMBER_PATCH_BUILD = 0x52;
CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_0 = 0x5A;
CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_1 = 0x5B;
CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_2 = 0x5C;
CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_3 = 0x5D;
CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_4 = 0x5E;
CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_5 = 0x5F;
CB1_PROTO_CONFIG_SET_BASE_RESERVED = 0x60;
CB1_PROTO_CONFIG_SET_BASE_ACTUATOR_TYPE = 0x61;
CB1_PROTO_CONFIG_SET_BASE_MOTOR_TYPE = 0x62;
CB1_PROTO_CONFIG_SET_BASE_SENSOR_ENABLED = 0x63;
CB1_PROTO_CONFIG_SET_BASE_SENSOR_OUTPUT_PRIORITY = 0x64;
CB1_PROTO_CONFIG_SET_BASE_TRANSMISSION_PRIORITY = 0x65;
CB1_PROTO_CONFIG_GET_BASE_RESERVED = 0x70;
CB1_PROTO_CONFIG_GET_BASE_ACTUATOR_TYPE = 0x71;
CB1_PROTO_CONFIG_GET_BASE_MOTOR_TYPE = 0x72;
CB1_PROTO_CONFIG_GET_BASE_SENSOR_ENABLED = 0x73;
CB1_PROTO_INVALID_SLOT_VALUE = 0;
DEFINITION_SLOTS = [0x00, 0x01, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, 0x2F, 0x30, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, 0x3F, 0x40, 0x41, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, 0x45, 0x46, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, 0x70, 0x71, 0x72, 0x73, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE, CB1_PROTO_INVALID_SLOT_VALUE];
CODEC_SLOTS = [
  {
    id: 0x00,
    codecs: null
  }, {
    id: 0x01,
    codecs: [{
      name: "reserved",
      offset: 0,
      length: 8,
      'default': 0x00,
      minimum: 0x00,
      maximum: 0xFF,
      s_mask: 0xFF,
      d_mask: 0x00
    }]
  }, {
    id: 0x02,
    codecs: null
  }, {
    id: 0x03,
    codecs: null
  }, {
    id: 0x04,
    codecs: null
  }, {
    id: 0x05,
    codecs: null
  }, {
    id: 0x06,
    codecs: null
  }, {
    id: 0x07,
    codecs: null
  }, {
    id: 0x08,
    codecs: null
  }, {
    id: 0x09,
    codecs: null
  }, {
    id: 0x0A,
    codecs: null
  }, {
    id: 0x0B,
    codecs: null
  }, {
    id: 0x0C,
    codecs: null
  }, {
    id: 0x0D,
    codecs: null
  }, {
    id: 0x0E,
    codecs: null
  }, {
    id: 0x0F,
    codecs: null
  }, {
    id: 0x10,
    codecs: null
  }, {
    id: 0x11,
    codecs: null
  }, {
    id: 0x12,
    codecs: null
  }, {
    id: 0x13,
    codecs: null
  }, {
    id: 0x14,
    codecs: null
  }, {
    id: 0x15,
    codecs: null
  }, {
    id: 0x16,
    codecs: [
      {
        name: "reserved",
        offset: 0,
        length: 7,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x7F,
        s_mask: 0xFF,
        d_mask: 0x00
      }, {
        name: "enabled",
        offset: 8,
        length: 1,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x01,
        s_mask: 0xFF,
        d_mask: 0x00
      }
    ]
  }, {
    id: 0x17,
    codecs: [
      {
        name: "reserved",
        offset: 0,
        length: 7,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x7F,
        s_mask: 0xFF,
        d_mask: 0x00
      }, {
        name: "enabled",
        offset: 8,
        length: 1,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x01,
        s_mask: 0xFF,
        d_mask: 0x00
      }
    ]
  }, {
    id: 0x18,
    codecs: null
  }, {
    id: 0x19,
    codecs: null
  }, {
    id: 0x1A,
    codecs: null
  }, {
    id: 0x1B,
    codecs: null
  }, {
    id: 0x1C,
    codecs: null
  }, {
    id: 0x1D,
    codecs: null
  }, {
    id: 0x1E,
    codecs: null
  }, {
    id: 0x1F,
    codecs: null
  }, {
    id: 0x20,
    codecs: null
  }, {
    id: 0x21,
    codecs: [
      {
        name: "is_clockwise",
        offset: 0,
        length: 1,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0xFF,
        s_mask: 0xFF,
        d_mask: 0x00
      }, {
        name: "value",
        offset: 1,
        length: 7,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x7F,
        s_mask: 0xFF,
        d_mask: 0x00
      }
    ]
  }, {
    id: 0x22,
    codecs: [
      {
        name: "is_clockwise",
        offset: 0,
        length: 1,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0xFF,
        s_mask: 0xFF,
        d_mask: 0x00
      }, {
        name: "value",
        offset: 1,
        length: 7,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x7F,
        s_mask: 0xFF,
        d_mask: 0x00
      }
    ]
  }, {
    id: 0x23,
    codecs: [
      {
        name: "is_clockwise",
        offset: 0,
        length: 1,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0xFF,
        s_mask: 0xFF,
        d_mask: 0x00
      }, {
        name: "value",
        offset: 1,
        length: 7,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x7F,
        s_mask: 0xFF,
        d_mask: 0x00
      }
    ]
  }, {
    id: 0x24,
    codecs: [
      {
        name: "is_clockwise",
        offset: 0,
        length: 1,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0xFF,
        s_mask: 0xFF,
        d_mask: 0x00
      }, {
        name: "value",
        offset: 1,
        length: 7,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x7F,
        s_mask: 0xFF,
        d_mask: 0x00
      }
    ]
  }, {
    id: 0x25,
    codecs: null
  }, {
    id: 0x26,
    codecs: null
  }, {
    id: 0x27,
    codecs: null
  }, {
    id: 0x28,
    codecs: null
  }, {
    id: 0x29,
    codecs: null
  }, {
    id: 0x2A,
    codecs: null
  }, {
    id: 0x2B,
    codecs: null
  }, {
    id: 0x2C,
    codecs: null
  }, {
    id: 0x2D,
    codecs: null
  }, {
    id: 0x2E,
    codecs: null
  }, {
    id: 0x2F,
    codecs: null
  }, {
    id: 0x30,
    codecs: null
  }, {
    id: 0x31,
    codecs: null
  }, {
    id: 0x32,
    codecs: null
  }, {
    id: 0x33,
    codecs: null
  }, {
    id: 0x34,
    codecs: null
  }, {
    id: 0x35,
    codecs: null
  }, {
    id: 0x36,
    codecs: null
  }, {
    id: 0x37,
    codecs: null
  }, {
    id: 0x38,
    codecs: null
  }, {
    id: 0x39,
    codecs: null
  }, {
    id: 0x3A,
    codecs: null
  }, {
    id: 0x3B,
    codecs: null
  }, {
    id: 0x3C,
    codecs: null
  }, {
    id: 0x3D,
    codecs: null
  }, {
    id: 0x3E,
    codecs: null
  }, {
    id: 0x3F,
    codecs: null
  }, {
    id: 0x40,
    codecs: null
  }, {
    id: 0x41,
    codecs: null
  }, {
    id: 0x42,
    codecs: null
  }, {
    id: 0x43,
    codecs: null
  }, {
    id: 0x44,
    codecs: null
  }, {
    id: 0x45,
    codecs: null
  }, {
    id: 0x46,
    codecs: null
  }, {
    id: 0x47,
    codecs: null
  }, {
    id: 0x48,
    codecs: null
  }, {
    id: 0x49,
    codecs: null
  }, {
    id: 0x4A,
    codecs: null
  }, {
    id: 0x4B,
    codecs: null
  }, {
    id: 0x4C,
    codecs: null
  }, {
    id: 0x4D,
    codecs: null
  }, {
    id: 0x4E,
    codecs: null
  }, {
    id: 0x4F,
    codecs: null
  }, {
    id: 0x50,
    codecs: null
  }, {
    id: 0x51,
    codecs: null
  }, {
    id: 0x52,
    codecs: null
  }, {
    id: 0x53,
    codecs: null
  }, {
    id: 0x54,
    codecs: null
  }, {
    id: 0x55,
    codecs: null
  }, {
    id: 0x56,
    codecs: null
  }, {
    id: 0x57,
    codecs: null
  }, {
    id: 0x58,
    codecs: null
  }, {
    id: 0x59,
    codecs: null
  }, {
    id: 0x5A,
    codecs: null
  }, {
    id: 0x5B,
    codecs: null
  }, {
    id: 0x5C,
    codecs: null
  }, {
    id: 0x5D,
    codecs: null
  }, {
    id: 0x5E,
    codecs: null
  }, {
    id: 0x5F,
    codecs: null
  }, {
    id: 0x60,
    codecs: null
  }, {
    id: 0x61,
    codecs: null
  }, {
    id: 0x62,
    codecs: [
      {
        name: "reserved",
        offset: 0,
        length: 3,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x07,
        s_mask: 0xFF,
        d_mask: 0x00
      }, {
        name: "is_ddm",
        offset: 3,
        length: 1,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x01,
        s_mask: 0xFF,
        d_mask: 0x00
      }, {
        name: "motor",
        offset: 4,
        length: 4,
        'default': 0x20,
        minimum: 0x20,
        maximum: 0x2F,
        s_mask: 0x0F,
        d_mask: 0x20
      }
    ]
  }, {
    id: 0x63,
    codecs: [
      {
        name: "reserved",
        offset: 0,
        length: 3,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x07,
        s_mask: 0xFF,
        d_mask: 0x00
      }, {
        name: "enabled",
        offset: 3,
        length: 1,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x01,
        s_mask: 0xFF,
        d_mask: 0x00
      }, {
        name: "sensor",
        offset: 4,
        length: 4,
        'default': 0x40,
        minimum: 0x40,
        maximum: 0x4F,
        s_mask: 0x0F,
        d_mask: 0x40
      }
    ]
  }, {
    id: 0x64,
    codecs: [
      {
        name: "reserved",
        offset: 0,
        length: 2,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x03,
        s_mask: 0xFF,
        d_mask: 0x00
      }, {
        name: "priority",
        offset: 2,
        length: 2,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x03,
        s_mask: 0xFF,
        d_mask: 0x00
      }, {
        name: "sensor",
        offset: 4,
        length: 4,
        'default': 0x40,
        minimum: 0x40,
        maximum: 0x4F,
        s_mask: 0x0F,
        d_mask: 0x40
      }
    ]
  }, {
    id: 0x65,
    codecs: null
  }, {
    id: 0x66,
    codecs: null
  }, {
    id: 0x67,
    codecs: null
  }, {
    id: 0x68,
    codecs: null
  }, {
    id: 0x69,
    codecs: null
  }, {
    id: 0x6A,
    codecs: null
  }, {
    id: 0x6B,
    codecs: null
  }, {
    id: 0x6C,
    codecs: null
  }, {
    id: 0x6D,
    codecs: null
  }, {
    id: 0x6E,
    codecs: null
  }, {
    id: 0x6F,
    codecs: null
  }, {
    id: 0x70,
    codecs: null
  }, {
    id: 0x71,
    codecs: null
  }, {
    id: 0x72,
    codecs: [
      {
        name: "reserved",
        offset: 0,
        length: 3,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x07,
        s_mask: 0xFF,
        d_mask: 0x00
      }, {
        name: "is_ddm",
        offset: 3,
        length: 1,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x01,
        s_mask: 0xFF,
        d_mask: 0x00
      }, {
        name: "motor",
        offset: 4,
        length: 4,
        'default': 0x20,
        minimum: 0x20,
        maximum: 0x2F,
        s_mask: 0x0F,
        d_mask: 0x20
      }
    ]
  }, {
    id: 0x73,
    codecs: [
      {
        name: "reserved",
        offset: 0,
        length: 3,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x07,
        s_mask: 0xFF,
        d_mask: 0x00
      }, {
        name: "enabled",
        offset: 3,
        length: 1,
        'default': 0x00,
        minimum: 0x00,
        maximum: 0x01,
        s_mask: 0xFF,
        d_mask: 0x00
      }, {
        name: "sensor",
        offset: 4,
        length: 4,
        'default': 0x20,
        minimum: 0x20,
        maximum: 0x2F,
        s_mask: 0x0F,
        d_mask: 0x20
      }
    ]
  }, {
    id: 0x74,
    codecs: null
  }, {
    id: 0x75,
    codecs: null
  }, {
    id: 0x76,
    codecs: null
  }, {
    id: 0x77,
    codecs: null
  }, {
    id: 0x78,
    codecs: null
  }, {
    id: 0x79,
    codecs: null
  }, {
    id: 0x7A,
    codecs: null
  }, {
    id: 0x7B,
    codecs: null
  }, {
    id: 0x7C,
    codecs: null
  }, {
    id: 0x7D,
    codecs: null
  }, {
    id: 0x7E,
    codecs: null
  }, {
    id: 0x7F,
    codecs: null
  }
];
METADATA_SLOTS = [
  {
    id: 0x00,
    metadata: null
  }, {
    id: 0x01,
    metadata: {
      from_central: true,
      from_peripheral: false
    }
  }, {
    id: 0x02,
    metadata: null
  }, {
    id: 0x03,
    metadata: null
  }, {
    id: 0x04,
    metadata: null
  }, {
    id: 0x05,
    metadata: null
  }, {
    id: 0x06,
    metadata: null
  }, {
    id: 0x07,
    metadata: null
  }, {
    id: 0x08,
    metadata: null
  }, {
    id: 0x09,
    metadata: null
  }, {
    id: 0x0A,
    metadata: null
  }, {
    id: 0x0B,
    metadata: null
  }, {
    id: 0x0C,
    metadata: null
  }, {
    id: 0x0D,
    metadata: null
  }, {
    id: 0x0E,
    metadata: null
  }, {
    id: 0x0F,
    metadata: null
  }, {
    id: 0x10,
    metadata: null
  }, {
    id: 0x11,
    metadata: null
  }, {
    id: 0x12,
    metadata: null
  }, {
    id: 0x13,
    metadata: null
  }, {
    id: 0x14,
    metadata: null
  }, {
    id: 0x15,
    metadata: null
  }, {
    id: 0x16,
    metadata: {
      from_central: true,
      from_peripheral: false
    }
  }, {
    id: 0x17,
    metadata: {
      from_central: true,
      from_peripheral: false
    }
  }, {
    id: 0x18,
    metadata: null
  }, {
    id: 0x19,
    metadata: null
  }, {
    id: 0x1A,
    metadata: null
  }, {
    id: 0x1B,
    metadata: null
  }, {
    id: 0x1C,
    metadata: null
  }, {
    id: 0x1D,
    metadata: null
  }, {
    id: 0x1E,
    metadata: null
  }, {
    id: 0x1F,
    metadata: null
  }, {
    id: 0x20,
    metadata: null
  }, {
    id: 0x21,
    metadata: {
      from_central: true,
      from_peripheral: false
    }
  }, {
    id: 0x22,
    metadata: {
      from_central: true,
      from_peripheral: false
    }
  }, {
    id: 0x23,
    metadata: {
      from_central: true,
      from_peripheral: false
    }
  }, {
    id: 0x24,
    metadata: {
      from_central: true,
      from_peripheral: false
    }
  }, {
    id: 0x25,
    metadata: null
  }, {
    id: 0x26,
    metadata: null
  }, {
    id: 0x27,
    metadata: null
  }, {
    id: 0x28,
    metadata: null
  }, {
    id: 0x29,
    metadata: null
  }, {
    id: 0x2A,
    metadata: null
  }, {
    id: 0x2B,
    metadata: null
  }, {
    id: 0x2C,
    metadata: null
  }, {
    id: 0x2D,
    metadata: null
  }, {
    id: 0x2E,
    metadata: null
  }, {
    id: 0x2F,
    metadata: null
  }, {
    id: 0x30,
    metadata: null
  }, {
    id: 0x31,
    metadata: null
  }, {
    id: 0x32,
    metadata: null
  }, {
    id: 0x33,
    metadata: null
  }, {
    id: 0x34,
    metadata: null
  }, {
    id: 0x35,
    metadata: null
  }, {
    id: 0x36,
    metadata: null
  }, {
    id: 0x37,
    metadata: null
  }, {
    id: 0x38,
    metadata: null
  }, {
    id: 0x39,
    metadata: null
  }, {
    id: 0x3A,
    metadata: null
  }, {
    id: 0x3B,
    metadata: null
  }, {
    id: 0x3C,
    metadata: null
  }, {
    id: 0x3D,
    metadata: null
  }, {
    id: 0x3E,
    metadata: null
  }, {
    id: 0x3F,
    metadata: null
  }, {
    id: 0x40,
    metadata: null
  }, {
    id: 0x41,
    metadata: null
  }, {
    id: 0x42,
    metadata: null
  }, {
    id: 0x43,
    metadata: null
  }, {
    id: 0x44,
    metadata: null
  }, {
    id: 0x45,
    metadata: null
  }, {
    id: 0x46,
    metadata: null
  }, {
    id: 0x47,
    metadata: null
  }, {
    id: 0x48,
    metadata: null
  }, {
    id: 0x49,
    metadata: null
  }, {
    id: 0x4A,
    metadata: null
  }, {
    id: 0x4B,
    metadata: null
  }, {
    id: 0x4C,
    metadata: null
  }, {
    id: 0x4D,
    metadata: null
  }, {
    id: 0x4E,
    metadata: null
  }, {
    id: 0x4F,
    metadata: null
  }, {
    id: 0x50,
    metadata: null
  }, {
    id: 0x51,
    metadata: null
  }, {
    id: 0x52,
    metadata: null
  }, {
    id: 0x53,
    metadata: null
  }, {
    id: 0x54,
    metadata: null
  }, {
    id: 0x55,
    metadata: null
  }, {
    id: 0x56,
    metadata: null
  }, {
    id: 0x57,
    metadata: null
  }, {
    id: 0x58,
    metadata: null
  }, {
    id: 0x59,
    metadata: null
  }, {
    id: 0x5A,
    metadata: null
  }, {
    id: 0x5B,
    metadata: null
  }, {
    id: 0x5C,
    metadata: null
  }, {
    id: 0x5D,
    metadata: null
  }, {
    id: 0x5E,
    metadata: null
  }, {
    id: 0x5F,
    metadata: null
  }, {
    id: 0x60,
    metadata: null
  }, {
    id: 0x61,
    metadata: null
  }, {
    id: 0x62,
    metadata: {
      from_central: true,
      from_peripheral: false
    }
  }, {
    id: 0x63,
    metadata: {
      from_central: true,
      from_peripheral: false
    }
  }, {
    id: 0x64,
    metadata: {
      from_central: true,
      from_peripheral: false
    }
  }, {
    id: 0x65,
    metadata: null
  }, {
    id: 0x66,
    metadata: null
  }, {
    id: 0x67,
    metadata: null
  }, {
    id: 0x68,
    metadata: null
  }, {
    id: 0x69,
    metadata: null
  }, {
    id: 0x6A,
    metadata: null
  }, {
    id: 0x6B,
    metadata: null
  }, {
    id: 0x6C,
    metadata: null
  }, {
    id: 0x6D,
    metadata: null
  }, {
    id: 0x6E,
    metadata: null
  }, {
    id: 0x6F,
    metadata: null
  }, {
    id: 0x70,
    metadata: null
  }, {
    id: 0x71,
    metadata: null
  }, {
    id: 0x72,
    metadata: {
      from_central: true,
      from_peripheral: true
    }
  }, {
    id: 0x73,
    metadata: {
      from_central: true,
      from_peripheral: true
    }
  }, {
    id: 0x74,
    metadata: null
  }, {
    id: 0x75,
    metadata: null
  }, {
    id: 0x76,
    metadata: null
  }, {
    id: 0x77,
    metadata: null
  }, {
    id: 0x78,
    metadata: null
  }, {
    id: 0x79,
    metadata: null
  }, {
    id: 0x7A,
    metadata: null
  }, {
    id: 0x7B,
    metadata: null
  }, {
    id: 0x7C,
    metadata: null
  }, {
    id: 0x7D,
    metadata: null
  }, {
    id: 0x7E,
    metadata: null
  }, {
    id: 0x7F,
    metadata: null
  }
];
CONSTANT_NAMES = ["CB1_PROTO_BASIC_BASE_BLANK", "CB1_PROTO_BASIC_BASE_REQUEST_SYSTEM_INFO", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CB1_PROTO_ACTUATOR_BASE_RESERVED", "CB1_PROTO_ACTUATOR_BASE_LED_1", "CB1_PROTO_ACTUATOR_BASE_LED_2", "CB1_PROTO_ACTUATOR_BASE_LED_3", "CB1_PROTO_ACTUATOR_BASE_LED_4", "CB1_PROTO_ACTUATOR_BASE_LED_5", "CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_1", "CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_2", "CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_3", "CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_4", "CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_5", "CB1_PROTO_ACTUATOR_BASE_SHIELD1_SOUND_1", null, null, null, null, "CB1_PROTO_MOTOR_BASE_SOCKET_RESERVED", "CB1_PROTO_MOTOR_BASE_SOCKET_1", "CB1_PROTO_MOTOR_BASE_SOCKET_2", "CB1_PROTO_MOTOR_BASE_SOCKET_3", "CB1_PROTO_MOTOR_BASE_SOCKET_4", "CB1_PROTO_MOTOR_BASE_SOCKET_5", "CB1_PROTO_MOTOR_BASE_SOCKET_6", "CB1_PROTO_MOTOR_BASE_SOCKET_7", "CB1_PROTO_MOTOR_BASE_SOCKET_8", "CB1_PROTO_MOTOR_BASE_SOCKET_9", "CB1_PROTO_MOTOR_BASE_SOCKET_10", null, null, null, null, "CB1_PROTO_MOTOR_BASE_END", "CB1_PROTO_XXX_BASE_SOCKET_RESERVED", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CB1_PROTO_XXX_BASE_END", "CB1_PROTO_SENSOR_BASE_RESERVED", "CB1_PROTO_SENSOR_BASE_BATTERY_SENSOR", null, null, null, "CB1_PROTO_SENSOR_BASE_DISTANCE_SENSOR", "CB1_PROTO_SENSOR_BASE_ILLUMINANCE_SENSOR", null, null, null, null, "CB1_PROTO_SENSOR_BASE_BUTTON_1", "CB1_PROTO_SENSOR_BASE_BUTTON_2", "CB1_PROTO_SENSOR_BASE_BUTTON_3", "CB1_PROTO_SENSOR_BASE_BUTTON_4", "CB1_PROTO_SENSOR_BASE_END", "CB1_PROTO_SYSTEM_BASE_RESERVED", "CB1_PROTO_SYSTEM_BASE_VERSION_NUMBER_MAJOR_MINOR", "CB1_PROTO_SYSTEM_BASE_VERSION_NUMBER_PATCH_BUILD", null, null, null, null, null, null, null, "CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_0", "CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_1", "CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_2", "CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_3", "CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_4", "CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_5", "CB1_PROTO_CONFIG_SET_BASE_RESERVED", "CB1_PROTO_CONFIG_SET_BASE_ACTUATOR_TYPE", "CB1_PROTO_CONFIG_SET_BASE_MOTOR_TYPE", "CB1_PROTO_CONFIG_SET_BASE_SENSOR_ENABLED", "CB1_PROTO_CONFIG_SET_BASE_SENSOR_OUTPUT_PRIORITY", "CB1_PROTO_CONFIG_SET_BASE_TRANSMISSION_PRIORITY", null, null, null, null, null, null, null, null, null, null, "CB1_PROTO_CONFIG_GET_BASE_RESERVED", "CB1_PROTO_CONFIG_GET_BASE_ACTUATOR_TYPE", "CB1_PROTO_CONFIG_GET_BASE_MOTOR_TYPE", "CB1_PROTO_CONFIG_GET_BASE_SENSOR_ENABLED", null, null, null, null, null, null, null, null, null, null, null, null];
CONSTANTS = {
  CB1_PROTO_BASIC_BASE_BLANK: CB1_PROTO_BASIC_BASE_BLANK,
  CB1_PROTO_BASIC_BASE_REQUEST_SYSTEM_INFO: CB1_PROTO_BASIC_BASE_REQUEST_SYSTEM_INFO,
  CB1_PROTO_ACTUATOR_BASE_RESERVED: CB1_PROTO_ACTUATOR_BASE_RESERVED,
  CB1_PROTO_ACTUATOR_BASE_LED_1: CB1_PROTO_ACTUATOR_BASE_LED_1,
  CB1_PROTO_ACTUATOR_BASE_LED_2: CB1_PROTO_ACTUATOR_BASE_LED_2,
  CB1_PROTO_ACTUATOR_BASE_LED_3: CB1_PROTO_ACTUATOR_BASE_LED_3,
  CB1_PROTO_ACTUATOR_BASE_LED_4: CB1_PROTO_ACTUATOR_BASE_LED_4,
  CB1_PROTO_ACTUATOR_BASE_LED_5: CB1_PROTO_ACTUATOR_BASE_LED_5,
  CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_1: CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_1,
  CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_2: CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_2,
  CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_3: CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_3,
  CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_4: CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_4,
  CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_5: CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_5,
  CB1_PROTO_ACTUATOR_BASE_SHIELD1_SOUND_1: CB1_PROTO_ACTUATOR_BASE_SHIELD1_SOUND_1,
  CB1_PROTO_MOTOR_BASE_SOCKET_RESERVED: CB1_PROTO_MOTOR_BASE_SOCKET_RESERVED,
  CB1_PROTO_MOTOR_BASE_SOCKET_1: CB1_PROTO_MOTOR_BASE_SOCKET_1,
  CB1_PROTO_MOTOR_BASE_SOCKET_2: CB1_PROTO_MOTOR_BASE_SOCKET_2,
  CB1_PROTO_MOTOR_BASE_SOCKET_3: CB1_PROTO_MOTOR_BASE_SOCKET_3,
  CB1_PROTO_MOTOR_BASE_SOCKET_4: CB1_PROTO_MOTOR_BASE_SOCKET_4,
  CB1_PROTO_MOTOR_BASE_SOCKET_5: CB1_PROTO_MOTOR_BASE_SOCKET_5,
  CB1_PROTO_MOTOR_BASE_SOCKET_6: CB1_PROTO_MOTOR_BASE_SOCKET_6,
  CB1_PROTO_MOTOR_BASE_SOCKET_7: CB1_PROTO_MOTOR_BASE_SOCKET_7,
  CB1_PROTO_MOTOR_BASE_SOCKET_8: CB1_PROTO_MOTOR_BASE_SOCKET_8,
  CB1_PROTO_MOTOR_BASE_SOCKET_9: CB1_PROTO_MOTOR_BASE_SOCKET_9,
  CB1_PROTO_MOTOR_BASE_SOCKET_10: CB1_PROTO_MOTOR_BASE_SOCKET_10,
  CB1_PROTO_MOTOR_BASE_END: CB1_PROTO_MOTOR_BASE_END,
  CB1_PROTO_XXX_BASE_SOCKET_RESERVED: CB1_PROTO_XXX_BASE_SOCKET_RESERVED,
  CB1_PROTO_XXX_BASE_END: CB1_PROTO_XXX_BASE_END,
  CB1_PROTO_SENSOR_BASE_RESERVED: CB1_PROTO_SENSOR_BASE_RESERVED,
  CB1_PROTO_SENSOR_BASE_BATTERY_SENSOR: CB1_PROTO_SENSOR_BASE_BATTERY_SENSOR,
  CB1_PROTO_SENSOR_BASE_DISTANCE_SENSOR: CB1_PROTO_SENSOR_BASE_DISTANCE_SENSOR,
  CB1_PROTO_SENSOR_BASE_ILLUMINANCE_SENSOR: CB1_PROTO_SENSOR_BASE_ILLUMINANCE_SENSOR,
  CB1_PROTO_SENSOR_BASE_BUTTON_1: CB1_PROTO_SENSOR_BASE_BUTTON_1,
  CB1_PROTO_SENSOR_BASE_BUTTON_2: CB1_PROTO_SENSOR_BASE_BUTTON_2,
  CB1_PROTO_SENSOR_BASE_BUTTON_3: CB1_PROTO_SENSOR_BASE_BUTTON_3,
  CB1_PROTO_SENSOR_BASE_BUTTON_4: CB1_PROTO_SENSOR_BASE_BUTTON_4,
  CB1_PROTO_SENSOR_BASE_END: CB1_PROTO_SENSOR_BASE_END,
  CB1_PROTO_SYSTEM_BASE_RESERVED: CB1_PROTO_SYSTEM_BASE_RESERVED,
  CB1_PROTO_SYSTEM_BASE_VERSION_NUMBER_MAJOR_MINOR: CB1_PROTO_SYSTEM_BASE_VERSION_NUMBER_MAJOR_MINOR,
  CB1_PROTO_SYSTEM_BASE_VERSION_NUMBER_PATCH_BUILD: CB1_PROTO_SYSTEM_BASE_VERSION_NUMBER_PATCH_BUILD,
  CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_0: CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_0,
  CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_1: CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_1,
  CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_2: CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_2,
  CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_3: CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_3,
  CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_4: CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_4,
  CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_5: CB1_PROTO_SYSTEM_BASE_BLE_MAC_ADDRESS_5,
  CB1_PROTO_CONFIG_SET_BASE_RESERVED: CB1_PROTO_CONFIG_SET_BASE_RESERVED,
  CB1_PROTO_CONFIG_SET_BASE_ACTUATOR_TYPE: CB1_PROTO_CONFIG_SET_BASE_ACTUATOR_TYPE,
  CB1_PROTO_CONFIG_SET_BASE_MOTOR_TYPE: CB1_PROTO_CONFIG_SET_BASE_MOTOR_TYPE,
  CB1_PROTO_CONFIG_SET_BASE_SENSOR_ENABLED: CB1_PROTO_CONFIG_SET_BASE_SENSOR_ENABLED,
  CB1_PROTO_CONFIG_SET_BASE_SENSOR_OUTPUT_PRIORITY: CB1_PROTO_CONFIG_SET_BASE_SENSOR_OUTPUT_PRIORITY,
  CB1_PROTO_CONFIG_SET_BASE_TRANSMISSION_PRIORITY: CB1_PROTO_CONFIG_SET_BASE_TRANSMISSION_PRIORITY,
  CB1_PROTO_CONFIG_GET_BASE_RESERVED: CB1_PROTO_CONFIG_GET_BASE_RESERVED,
  CB1_PROTO_CONFIG_GET_BASE_ACTUATOR_TYPE: CB1_PROTO_CONFIG_GET_BASE_ACTUATOR_TYPE,
  CB1_PROTO_CONFIG_GET_BASE_MOTOR_TYPE: CB1_PROTO_CONFIG_GET_BASE_MOTOR_TYPE,
  CB1_PROTO_CONFIG_GET_BASE_SENSOR_ENABLED: CB1_PROTO_CONFIG_GET_BASE_SENSOR_ENABLED,
  MAX_ID_COUNT: DEFINITION_SLOTS.length
};
isValid = function(v){
  if (v < 0) {
    return CB1_PROTO_INVALID_SLOT_VALUE;
  }
  if (v >= 128) {
    return CB1_PROTO_INVALID_SLOT_VALUE;
  }
  return exports.definition_slots[v];
};
Agent = (function(){
  Agent.displayName = 'Agent';
  var prototype = Agent.prototype, constructor = Agent;
  function Agent(engine){
    this.engine = engine;
    return;
  }
  prototype.flush = function(){
    return this.engine.flush();
  };
  prototype.basic_request_system_info = function(reserved){
    var parameters;
    reserved == null && (reserved = 0x00);
    parameters = {
      reserved: reserved
    };
    return this.engine.perform(CB1_PROTO_BASIC_BASE_REQUEST_SYSTEM_INFO, parameters, ['reserved']);
  };
  prototype.actuator_shield1_led_1 = function(enabled, reserved){
    var parameters;
    enabled == null && (enabled = false);
    reserved == null && (reserved = 0x00);
    parameters = {
      enabled: enabled,
      reserved: reserved
    };
    return this.engine.perform(CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_1, parameters, ['enabled', 'reserved']);
  };
  prototype.actuator_shield1_led_2 = function(enabled, reserved){
    var parameters;
    enabled == null && (enabled = false);
    reserved == null && (reserved = 0x00);
    parameters = {
      enabled: enabled,
      reserved: reserved
    };
    return this.engine.perform(CB1_PROTO_ACTUATOR_BASE_SHIELD1_LED_2, parameters, ['enabled', 'reserved']);
  };
  prototype.motor_socket_1 = function(value, is_clockwise){
    var parameters;
    value == null && (value = 0x00);
    is_clockwise == null && (is_clockwise = false);
    parameters = {
      value: value,
      is_clockwise: is_clockwise
    };
    return this.engine.perform(CB1_PROTO_MOTOR_BASE_SOCKET_1, parameters, ['value', 'is_clockwise']);
  };
  prototype.motor_socket_2 = function(value, is_clockwise){
    var parameters;
    value == null && (value = 0x00);
    is_clockwise == null && (is_clockwise = false);
    parameters = {
      value: value,
      is_clockwise: is_clockwise
    };
    return this.engine.perform(CB1_PROTO_MOTOR_BASE_SOCKET_2, parameters, ['value', 'is_clockwise']);
  };
  prototype.motor_socket_3 = function(value, is_clockwise){
    var parameters;
    value == null && (value = 0x00);
    is_clockwise == null && (is_clockwise = false);
    parameters = {
      value: value,
      is_clockwise: is_clockwise
    };
    return this.engine.perform(CB1_PROTO_MOTOR_BASE_SOCKET_3, parameters, ['value', 'is_clockwise']);
  };
  prototype.motor_socket_4 = function(value, is_clockwise){
    var parameters;
    value == null && (value = 0x00);
    is_clockwise == null && (is_clockwise = false);
    parameters = {
      value: value,
      is_clockwise: is_clockwise
    };
    return this.engine.perform(CB1_PROTO_MOTOR_BASE_SOCKET_4, parameters, ['value', 'is_clockwise']);
  };
  prototype.config_set_motor_type = function(motor, is_ddm, reserved){
    var parameters;
    motor == null && (motor = 0x20);
    is_ddm == null && (is_ddm = false);
    reserved == null && (reserved = 0x00);
    parameters = {
      motor: motor,
      is_ddm: is_ddm,
      reserved: reserved
    };
    return this.engine.perform(CB1_PROTO_CONFIG_SET_BASE_MOTOR_TYPE, parameters, ['motor', 'is_ddm', 'reserved']);
  };
  prototype.config_set_sensor_enabled = function(sensor, enabled, reserved){
    var parameters;
    sensor == null && (sensor = 0x40);
    enabled == null && (enabled = false);
    reserved == null && (reserved = 0x00);
    parameters = {
      sensor: sensor,
      enabled: enabled,
      reserved: reserved
    };
    return this.engine.perform(CB1_PROTO_CONFIG_SET_BASE_SENSOR_ENABLED, parameters, ['sensor', 'enabled', 'reserved']);
  };
  prototype.config_set_sensor_output_priority = function(sensor, priority, reserved){
    var parameters;
    sensor == null && (sensor = 0x40);
    priority == null && (priority = 0x00);
    reserved == null && (reserved = 0x00);
    parameters = {
      sensor: sensor,
      priority: priority,
      reserved: reserved
    };
    return this.engine.perform(CB1_PROTO_CONFIG_SET_BASE_SENSOR_OUTPUT_PRIORITY, parameters, ['sensor', 'priority', 'reserved']);
  };
  prototype.config_get_motor_type = function(motor, is_ddm, reserved){
    var parameters;
    motor == null && (motor = 0x20);
    is_ddm == null && (is_ddm = false);
    reserved == null && (reserved = 0x00);
    parameters = {
      motor: motor,
      is_ddm: is_ddm,
      reserved: reserved
    };
    return this.engine.perform(CB1_PROTO_CONFIG_GET_BASE_MOTOR_TYPE, parameters, ['motor', 'is_ddm', 'reserved']);
  };
  prototype.config_get_sensor_enabled = function(sensor, enabled, reserved){
    var parameters;
    sensor == null && (sensor = 0x20);
    enabled == null && (enabled = false);
    reserved == null && (reserved = 0x00);
    parameters = {
      sensor: sensor,
      enabled: enabled,
      reserved: reserved
    };
    return this.engine.perform(CB1_PROTO_CONFIG_GET_BASE_SENSOR_ENABLED, parameters, ['sensor', 'enabled', 'reserved']);
  };
  return Agent;
}());
Engine = (function(superclass){
  var prototype = extend$((import$(Engine, superclass).displayName = 'Engine', Engine), superclass).prototype, constructor = Engine;
  function Engine(rpc){
    var defs;
    this.protocol_version = "1.0.0";
    this.agent = new Agent(this);
    defs = {
      constants: CONSTANTS,
      constant_names: CONSTANT_NAMES,
      definition_slots: DEFINITION_SLOTS,
      codec_slots: CODEC_SLOTS,
      metadata_slots: METADATA_SLOTS
    };
    return Engine.superclass.call(this, defs, rpc);
  }
  return Engine;
}(require('./engine')));
module.exports = exports = {
  constants: CONSTANTS,
  constant_names: CONSTANT_NAMES,
  definition_slots: DEFINITION_SLOTS,
  codec_slots: CODEC_SLOTS,
  metadata_slots: METADATA_SLOTS,
  Engine: Engine,
  isValid: isValid
};
function extend$(sub, sup){
  function fun(){} fun.prototype = (sub.superclass = sup).prototype;
  (sub.prototype = new fun).constructor = sub;
  if (typeof sup.extended == 'function') sup.extended(sub);
  return sub;
}
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}

},{"./engine":10}],10:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var InnerEngine, exports, DecoratedEngine;
InnerEngine = require('./engine_inner');
module.exports = exports = DecoratedEngine = (function(){
  DecoratedEngine.displayName = 'DecoratedEngine';
  var prototype = DecoratedEngine.prototype, constructor = DecoratedEngine;
  function DecoratedEngine(defs, rpc){
    var self, key, value;
    this.defs = defs;
    this.rpc = rpc != null ? rpc : null;
    this.inner = new InnerEngine(this.defs);
    self = this;
    for (key in defs) {
      value = defs[key];
      self[key] = value;
    }
    return;
  }
  prototype.init = function(opts){
    if (this.rpc != null) {
      return this.rpc.invoke('init', Array.prototype.slice.call(arguments));
    }
    return this.inner.init(opts);
  };
  prototype.perform = function(id, parameters, parameter_names){
    if (this.rpc != null) {
      return this.rpc.invoke('perform', Array.prototype.slice.call(arguments));
    }
    return this.inner.perform(id, parameters, parameter_names);
  };
  prototype.test_encoder = function(cmd){
    if (this.rpc != null) {
      return this.rpc.invoke('test_encoder', Array.prototype.slice.call(arguments));
    }
    return this.inner.test_encoder(cmd);
  };
  prototype.run_periodically = function(){
    if (this.rpc != null) {
      return this.rpc.invoke('run_periodically', Array.prototype.slice.call(arguments));
    }
    return this.inner.run_periodically();
  };
  prototype.flush = function(){
    if (this.rpc != null) {
      return this.rpc.invoke('flush', Array.prototype.slice.call(arguments));
    }
    return this.inner.flush();
  };
  prototype.reset_state = function(){
    if (this.rpc != null) {
      return this.rpc.invoke('reset_state', Array.prototype.slice.call(arguments));
    }
    return this.inner.reset_state();
  };
  prototype.next_bytes = function(bytes){
    if (this.rpc != null) {
      return this.rpc.invoke('next_bytes', Array.prototype.slice.call(arguments));
    }
    return this.inner.next_bytes(bytes);
  };
  prototype.next_byte = function(b){
    if (this.rpc != null) {
      return this.rpc.invoke('next_byte', Array.prototype.slice.call(arguments));
    }
    return this.inner.next_byte(b);
  };
  return DecoratedEngine;
}());

},{"./engine_inner":11}],11:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var ref$, sum, map, chars, reverse, sys_test, ble_write_characteristic, on_cb1_packet_in, on_cb1_packet_out, on_007_packet, logger, DBG, BYTES_TO_HEX_STRING, INT_TO_HEX, DBX, ERR_WITH_RET, DECOMPOSE_FRAME, COMPOSE_FRAME, Request, InnerEngine, exports;
ref$ = require('prelude-ls'), sum = ref$.sum, map = ref$.map, chars = ref$.chars, reverse = ref$.reverse;
ref$ = require('./platform'), sys_test = ref$.sys_test, ble_write_characteristic = ref$.ble_write_characteristic, on_cb1_packet_in = ref$.on_cb1_packet_in, on_cb1_packet_out = ref$.on_cb1_packet_out, on_007_packet = ref$.on_007_packet, logger = ref$.logger;
DBG = logger.DBG;
ref$ = require('./utils'), BYTES_TO_HEX_STRING = ref$.BYTES_TO_HEX_STRING, INT_TO_HEX = ref$.INT_TO_HEX;
DBX = function(line){};
ERR_WITH_RET = function(err){
  DBG(err);
  return [err, null];
};
DECOMPOSE_FRAME = function(pid, i, bytes, codec_slots, constant_names, metadata_slots){
  var id, v, codecs, metadata, name, parameters, cx, res$, i$, len$, c;
  if (bytes.length !== 2) {
    return ["[" + pid + "-" + i + "] expects 2 bytes but " + bytes.length, null];
  }
  id = bytes[0];
  v = bytes[1];
  if (!(id >= 0)) {
    return ["[" + pid + "-" + i + "] " + id + " is negative", null];
  }
  if (!(id <= 0xFF)) {
    return ["[" + pid + "-" + i + "] id: " + id + " is more than 8 bits addressing", null];
  }
  if (!(id < codec_slots.length)) {
    return ["[" + pid + "-" + i + "] id: " + id + " is more than " + range, null];
  }
  codecs = codec_slots[id].codecs;
  metadata = metadata_slots[id].metadata;
  name = constant_names[id];
  if (id === 0 && v === 0) {
    return [null, null];
  }
  if (name == null) {
    return ["undefined identity " + INT_TO_HEX(id, 2), null];
  }
  if (codecs == null) {
    return ["undefined codec for identity " + INT_TO_HEX(id, 2), null];
  }
  if (metadata == null) {
    return ["undefined metadata for identity " + INT_TO_HEX(id, 2), null];
  }
  if (!(metadata.from_peripheral != null && metadata.from_peripheral)) {
    return ["unexpected frame identity from peripheral " + INT_TO_HEX(id, 2), null];
  }
  parameters = {};
  res$ = [];
  for (i$ = 0, len$ = codecs.length; i$ < len$; ++i$) {
    c = codecs[i$];
    res$.push(c);
  }
  cx = res$;
  cx = reverse(
  cx);
  for (i$ = 0, len$ = cx.length; i$ < len$; ++i$) {
    (fn$.call(this, i$, cx[i$]));
  }
  return [
    null, {
      id: id,
      i: i,
      name: name,
      parameters: parameters
    }
  ];
  function fn$(i, c){
    var vx;
    vx = (v & (1 << c.length) - 1) | c.d_mask;
    if (vx === 1 && c.length === 1) {
      vx = true;
    }
    if (vx === 0 && c.length === 1) {
      vx = false;
    }
    v = v >> c.length;
    parameters[c.name] = vx;
  }
};
COMPOSE_FRAME = function(id, parameters, codec_slots){
  var idx, codecs, x, err, i$, len$;
  idx = "0x" + id.toString(16).toUpperCase();
  if (!(id >= 0)) {
    return ["id: " + idx + " is negative", null];
  }
  if (!(id <= 0xFF)) {
    return ["id: " + idx + " is more than 8 bits addressing", null];
  }
  if (!(id < codec_slots.length)) {
    return ["id: " + idx + " is more than " + range, null];
  }
  codecs = codec_slots[id].codecs;
  DBX("id = " + id);
  DBX("codec_slots[id].id = " + codec_slots[id].id);
  x = 0;
  err = null;
  if (codecs != null) {
    for (i$ = 0, len$ = codecs.length; i$ < len$; ++i$) {
      (fn$.call(this, i$, codecs[i$]));
    }
    if (err != null) {
      return [err, null];
    }
  } else {
    x = parameters.value;
    if (x == null) {
      return ["[" + idx + "] no value field", null];
    }
    if (!(x <= 0xFF)) {
      return ["[" + idx + "] " + x + " shall be less than 256", null];
    }
  }
  if (x > 0xFF) {
    return ["more than 8 bits addressing: " + x, null];
  }
  return [null, [id, x]];
  function fn$(i, c){
    var v;
    if (err == null) {
      v = parameters[c.name];
      DBX("[" + i + "] v = " + v);
      if (v == null) {
        v = c['default'];
      }
      if (c.length === 1 && typeof v === 'boolean' && v) {
        v = 1;
      }
      if (c.length === 1 && typeof v === 'boolean' && !v) {
        v = 0;
      }
      DBX("[" + i + "] v = " + v);
      if (v < c.minimum) {
        err = "[" + idx + "] " + v + " shall be greater than " + c.minimum;
      }
      if (v > c.maximum) {
        err = "[" + idx + "] " + v + " shall be less than " + c.maximum;
      }
      v = v & c.s_mask;
      DBX("[" + i + "] v = " + v);
      v = v & (1 << c.length) - 1;
      DBX("[" + i + "] v = " + v);
      DBX("x = " + x + ", before manipulation");
      x = (x << c.length) + v;
      DBX("x = " + x + ", after manipulation");
    }
  }
};
Request = (function(){
  Request.displayName = 'Request';
  var prototype = Request.prototype, constructor = Request;
  function Request(name, id, parameters){
    this.name = name;
    this.id = id;
    this.parameters = parameters;
    this.timestamp = new Date();
    return;
  }
  prototype.getKey = function(){
    return id + "";
  };
  prototype.getPriority = function(){
    return 0;
  };
  return Request;
}());
InnerEngine = (function(){
  InnerEngine.displayName = 'InnerEngine';
  var prototype = InnerEngine.prototype, constructor = InnerEngine;
  function InnerEngine(defs){
    this.defs = defs;
    this.constants = defs.constants;
    this.constant_names = defs.constant_names;
    this.definition_slots = defs.definition_slots;
    this.codec_slots = defs.codec_slots;
    this.metadata_slots = defs.metadata_slots;
    this.reset_state();
    return;
  }
  prototype.init = function(opts){
    var ble, uuencoded, flushType, b;
    ble = opts.ble, uuencoded = opts.uuencoded, flushType = opts.flushType;
    if (uuencoded == null) {
      uuencoded = false;
    }
    if (flushType == null) {
      flushType = "immediate";
    }
    this.uuencoded = uuencoded;
    this.flushType = flushType;
    DBG("ble = " + ble + " ...");
    DBG("uuencoded = " + uuencoded + " (base64)");
    DBG("flushType = " + flushType);
    if (ble === 'la_best_007') {
      this.bleCodec = b = require('./bluetooth_la_best_007');
    }
    if (this.bleCodec == null) {
      return DBG("missing ble codec: `" + ble + "`");
    }
    this.bleEncoder = b.getEncoder();
    this.bleEncoder.setEncoding(uuencoded);
    this.bleEncodeMaxBytes = this.bleEncoder.maxBytes();
    this.bleDecoder = b.getDecoder();
    return this.bleDecoder.setEncoding(uuencoded);
  };
  prototype.perform = function(id, parameters, parameter_names){
    var constant_names, protocol_version, requests, name, r;
    if (parameters == null) {
      return ERR_WITH_RET("perform: missing `parameters`");
    }
    if (parameter_names == null) {
      return ERR_WITH_RET("perform: missing `parameter_names`");
    }
    constant_names = this.constant_names, protocol_version = this.protocol_version, requests = this.requests;
    if (id >= constant_names.length) {
      return ERR_WITH_RET("perform: id [0x" + id.toString(16) + "] shall be out of protocol id range (0.." + (constant_names.length - 1) + ")");
    }
    name = constant_names[id];
    if (name == null) {
      return ERR_WITH_RET("perform: id [0x" + id.toString(16) + "] is undefined in protocol (v" + protocol_version + ")");
    }
    r = new Request(name, id, parameters);
    requests.push(r);
    if (this.flushType === 'immediate') {
      this.flush();
    }
    return [null, [0, 0]];
  };
  prototype.test_encoder = function(cmd){
    var bleEncoder, x, res$, i$, len$, a, ref$, err, array;
    bleEncoder = this.bleEncoder;
    x = chars(
    cmd);
    res$ = [];
    for (i$ = 0, len$ = x.length; i$ < len$; ++i$) {
      a = x[i$];
      res$.push(a.charCodeAt(0));
    }
    x = res$;
    ref$ = bleEncoder.encode(new Uint8Array(x)), err = ref$[0], array = ref$[1];
    if (err == null) {
      return ble_write_characteristic(Array.prototype.slice.call(array));
    }
    return DBG("unexpected error at test_encoder: " + err);
  };
  prototype.run_periodically = function(){
    return DBG("run_periodically");
  };
  prototype.flush_requests = function(reqs){
    var self, ref$, bleEncodeMaxBytes, bleEncoder, maxFrameCount, x, maxPacketCount, xs, res$, i$, len$, r, i, lresult$, j$, j, pid, lsb, hsb, bytes, frames, len1$, err, array, results$ = [];
    ref$ = self = this, bleEncodeMaxBytes = ref$.bleEncodeMaxBytes, bleEncoder = ref$.bleEncoder;
    maxFrameCount = (bleEncodeMaxBytes >> 1) - 1;
    x = reqs.length % maxFrameCount;
    maxPacketCount = x === 0
      ? reqs.length / maxFrameCount
      : (reqs.length - x) / maxFrameCount + 1;
    res$ = [];
    for (i$ = 0, len$ = reqs.length; i$ < len$; ++i$) {
      r = reqs[i$];
      res$.push(r);
    }
    xs = res$;
    res$ = [];
    for (i$ = 1; i$ <= maxPacketCount; ++i$) {
      i = i$;
      lresult$ = [];
      for (j$ = 1; j$ <= maxFrameCount; ++j$) {
        j = j$;
        lresult$.push(reqs.shift());
      }
      res$.push(lresult$);
    }
    xs = res$;
    for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
      x = xs[i$];
      pid = self.next_id();
      lsb = pid & 0xFF;
      hsb = pid >> 8 & 0xFF;
      bytes = [lsb, hsb];
      frames = [];
      for (j$ = 0, len1$ = x.length; j$ < len1$; ++j$) {
        (fn$.call(this, j$, x[j$]));
      }
      DBG("serialized: " + BYTES_TO_HEX_STRING(bytes));
      ref$ = bleEncoder.encode(new Uint8Array(bytes)), err = ref$[0], array = ref$[1];
      if (err != null) {
        results$.push(DBG("unexpected error at ble-encoder: " + err));
      } else {
        array = Array.prototype.slice.call(array);
        DBG("encoded: " + BYTES_TO_HEX_STRING(array));
        ble_write_characteristic(array);
        results$.push(on_cb1_packet_out(pid, frames));
      }
    }
    return results$;
    function fn$(i, req){
      var id, parameters, name, ref$, err, b;
      if (req != null) {
        id = req.id, parameters = req.parameters, name = req.name;
        DBG("serializing " + name + ": " + JSON.stringify(parameters));
        ref$ = COMPOSE_FRAME(id, parameters, self.codec_slots), err = ref$[0], b = ref$[1];
        if (err != null) {
          DBG("unexpected error: " + err);
        } else {
          bytes.push(b[0]);
          bytes.push(b[1]);
          frames.push({
            id: id,
            name: name,
            parameters: parameters,
            i: i
          });
        }
      } else {
        bytes.push(0);
        bytes.push(0);
      }
    }
  };
  prototype.flush = function(){
    var requests, bleEncodeMaxBytes, ref$, p, n;
    requests = this.requests, bleEncodeMaxBytes = this.bleEncodeMaxBytes;
    ref$ = this.merge(), p = ref$[0], n = ref$[1];
    this.requests = n;
    return this.flush_requests(p);
  };
  prototype.merge = function(){
    var requests, flushType;
    requests = this.requests, flushType = this.flushType;
    if (flushType === 'smart') {
      return this.smart_merge(requests);
    }
    return [requests, []];
  };
  prototype.smart_merge = function(requests){
    return [[], []];
  };
  prototype.reset_state = function(){
    this.id = 0x0000;
    return this.requests = [];
  };
  prototype.next_id = function(){
    if (this.id >= 0xFFFE) {
      this.id = 0x0000;
    }
    this.id = this.id + 1;
    return this.id;
  };
  prototype.next_bytes = function(bytes){
    this.bleDecoder.nextBytes(bytes);
    return this.processPackets();
  };
  prototype.next_byte = function(b){
    this.bleDecoder.nextByte(b);
    return this.processPackets();
  };
  prototype.processPacket = function(bytes){
    var codec_slots, constant_names, metadata_slots, lsb, hsb, pid, count, frameBytes, res$, i$, to$, i, framePacks, len$, frames, fp, f, errors, err;
    codec_slots = this.codec_slots, constant_names = this.constant_names, metadata_slots = this.metadata_slots;
    if (bytes.length < 2) {
      return DBG("[process-packet] less than 2 bytes: " + BYTES_TO_HEX_STRING(bytes));
    }
    lsb = bytes.shift();
    hsb = bytes.shift();
    pid = lsb + (hsb << 8);
    if (1 === bytes.length % 2) {
      return DBG("[process-packet] each frame shall contain 2 bytes: " + BYTES_TO_HEX_STRING(bytes));
    }
    if (pid === 0) {
      return DBG("[process-packet] unexpected pid: 0x0000: " + BYTES_TO_HEX_STRING(bytes));
    }
    if (pid === 0xFFFF) {
      return DBG("[process-packet] unexpected pid: 0xFFFF: " + BYTES_TO_HEX_STRING(bytes));
    }
    count = bytes.length >> 1;
    res$ = [];
    for (i$ = 0, to$ = count - 1; i$ <= to$; ++i$) {
      i = i$;
      res$.push([bytes[i * 2], bytes[i * 2 + 1]]);
    }
    frameBytes = res$;
    res$ = [];
    for (i$ = 0, len$ = frameBytes.length; i$ < len$; ++i$) {
      res$.push((fn$.call(this, i$, frameBytes[i$])));
    }
    framePacks = res$;
    res$ = [];
    for (i$ = 0, len$ = framePacks.length; i$ < len$; ++i$) {
      fp = framePacks[i$];
      if (fp[0] == null) {
        res$.push(fp[1]);
      }
    }
    frames = res$;
    res$ = [];
    for (i$ = 0, len$ = frames.length; i$ < len$; ++i$) {
      f = frames[i$];
      if (f != null) {
        res$.push(f);
      }
    }
    frames = res$;
    res$ = [];
    for (i$ = 0, len$ = framePacks.length; i$ < len$; ++i$) {
      fp = framePacks[i$];
      if (fp[0] != null) {
        res$.push(fp[0]);
      }
    }
    errors = res$;
    for (i$ = 0, len$ = errors.length; i$ < len$; ++i$) {
      err = errors[i$];
      DBG(err + "");
    }
    return on_cb1_packet_in(pid, frames);
    function fn$(i, f){
      return DECOMPOSE_FRAME(pid, i, f, codec_slots, constant_names, metadata_slots);
    }
  };
  prototype.processPackets = function(){
    var self, bleDecoder, i$, ref$, len$, p, results$ = [];
    bleDecoder = (self = this).bleDecoder;
    for (i$ = 0, len$ = (ref$ = bleDecoder.resetPackets()).length; i$ < len$; ++i$) {
      p = ref$[i$];
      results$.push(self.processPacket(p));
    }
    return results$;
  };
  return InnerEngine;
}());
module.exports = exports = InnerEngine;

},{"./bluetooth_la_best_007":8,"./platform":13,"./utils":14,"prelude-ls":7}],12:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var p, Engine, ref$, sys_test, ble_write_characteristic, logger, DBG, engine, entry, exports;
Engine = (p = require('./cb1_protocol')).Engine;
ref$ = require('./platform'), sys_test = ref$.sys_test, ble_write_characteristic = ref$.ble_write_characteristic, logger = ref$.logger;
DBG = logger.DBG;
engine = new Engine();
entry = function(args){
  var tokens, name, params, func, error;
  if (args == null) {
    return engine;
  }
  try {
    tokens = (args + "").split("\t");
    name = tokens[0], params = tokens[1];
    params = JSON.parse(params);
    func = engine[name];
    if (func != null) {
      if (func != null) {
        func.apply(engine, params);
      }
      return "success";
    } else {
      return "missing " + name + " function";
    }
  } catch (e$) {
    error = e$;
    return "unexpected error at entry: " + error;
  }
};
module.exports = exports = entry;

},{"./cb1_protocol":9,"./platform":13}],13:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var INVOKE_SYS_FUNC, exports;
INVOKE_SYS_FUNC = function(name, args){
  var tokens;
  if (typeof INVOKE == 'undefined' || INVOKE === null) {
    return;
  }
  tokens = [name, JSON.stringify(args)];
  return INVOKE(tokens.join("\t"));
};
module.exports = exports = {
  sys_test: function(a, b, c){
    return INVOKE_SYS_FUNC('sys_test', Array.prototype.slice.call(arguments));
  },
  ble_write_characteristic: function(buffer){
    return INVOKE_SYS_FUNC('ble_write_characteristic', Array.prototype.slice.call(arguments));
  },
  on_cb1_packet_in: function(pid, frames){
    return INVOKE_SYS_FUNC('on_cb1_packet_in', Array.prototype.slice.call(arguments));
  },
  on_cb1_packet_out: function(pid, frames){
    return INVOKE_SYS_FUNC('on_cb1_packet_out', Array.prototype.slice.call(arguments));
  },
  on_007_packet: function(buffer){
    return INVOKE_SYS_FUNC('ble_write_characteristic', Array.prototype.slice.call(arguments));
  },
  logger: {
    DBG: function(line){
      if (typeof LOGGER != 'undefined' && LOGGER !== null) {
        return LOGGER(line);
      }
      if ((typeof console != 'undefined' && console !== null) && console.log != null) {
        return console.log(line);
      }
    }
  }
};

},{}],14:[function(require,module,exports){
// Generated by LiveScript 1.4.0
var INT_TO_HEX, BYTES_TO_HEX_STRING, exports;
INT_TO_HEX = function(v, paddings){
  var x, i;
  paddings == null && (paddings = 4);
  v = v.toString(16).toUpperCase();
  x = (function(){
    var i$, to$, results$ = [];
    for (i$ = 1, to$ = paddings - v.length; i$ <= to$; ++i$) {
      i = i$;
      results$.push("0");
    }
    return results$;
  }()).join("");
  return "0x" + x + v;
};
BYTES_TO_HEX_STRING = function(bytes){
  var b;
  return (function(){
    var i$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = bytes).length; i$ < len$; ++i$) {
      b = ref$[i$];
      results$.push(INT_TO_HEX(b, 2));
    }
    return results$;
  }()).join(", ");
};
module.exports = exports = {
  INT_TO_HEX: INT_TO_HEX,
  BYTES_TO_HEX_STRING: BYTES_TO_HEX_STRING
};

},{}]},{},[12])(12)
});entry = function(x) { return window.entry(x); }
